#!/usr/bin/env python3
"""
Auto-Fix Script for Enhanced LangChain Orchestrator
==================================================
This script automatically detects and fixes common issues in the orchestrator.
"""

import ast
import os
import re
import sys
import shutil
import traceback
from pathlib import Path
from datetime import datetime

class AutoFixOrchestrator:
    def __init__(self, file_path: str):
        self.file_path = Path(file_path)
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)
        self.fixes_applied: list[str] = []  # Add type annotation
        
    def create_backup(self):
        """Create a backup of the original file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.backup_dir / f"{self.file_path.stem}_{timestamp}.py"
        shutil.copy2(self.file_path, backup_path)
        print(f"‚úÖ Backup created: {backup_path}")
        return backup_path
    
    def check_syntax(self) -> bool:
        """Check if the Python file has valid syntax"""
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            ast.parse(content)
            return True
        except SyntaxError as e:
            print(f"‚ùå Syntax error found: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Error checking syntax: {e}")
            return False
    
    def fix_indentation_issues(self):
        """Fix common indentation problems"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        fixed_lines: list[str] = []
        for i, line in enumerate(lines):
            # Fix 6-space indentation to 4-space
            if line.startswith('      ') and not line.startswith('        '):
                fixed_line = '    ' + line[6:]
                fixed_lines.append(fixed_line)
                if line != fixed_line:
                    self.fixes_applied.append(f"Line {i+1}: Fixed 6-space indentation")
            else:
                fixed_lines.append(line)
        
        # Write back the fixed content
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.writelines(fixed_lines)
    
    def fix_import_issues(self):
        """Fix duplicate and problematic imports"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Remove duplicate imports that appear in wrong places
        patterns_to_remove = [
            r'\nfrom langchain_openai import ChatOpenAI\nfrom langchain_community\.llms import HuggingFacePipeline',
            r'^from langchain_openai import ChatOpenAI$(?=.*^from langchain_openai import ChatOpenAI$)',
        ]
        
        for pattern in patterns_to_remove:
            if re.search(pattern, content, re.MULTILINE):
                content = re.sub(pattern, '', content, flags=re.MULTILINE)
                self.fixes_applied.append(f"Removed duplicate/misplaced import: {pattern[:50]}...")
        
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def fix_constant_issues(self):
        """Fix constant redefinition issues"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Replace ADVANCED_ML_AVAILABLE with advanced_ml_available
        if 'ADVANCED_ML_AVAILABLE' in content:
            content = content.replace('ADVANCED_ML_AVAILABLE', 'advanced_ml_available')
            self.fixes_applied.append("Fixed constant redefinition: ADVANCED_ML_AVAILABLE -> advanced_ml_available")
        
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def fix_try_except_blocks(self):
        """Fix incomplete try-except blocks"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        fixed_lines: list[str] = []
        i = 0
        while i < len(lines):
            line = lines[i]
            fixed_lines.append(line)
            
            # Check for incomplete try blocks
            if line.strip() == 'try:':
                # Look ahead to find except or finally
                j = i + 1
                found_except_or_finally = False
                while j < len(lines):
                    if lines[j].strip().startswith(('except', 'finally')):
                        found_except_or_finally = True
                        break
                    elif lines[j].strip() and not lines[j].startswith((' ', '\t')):
                        # Found a line that's not indented (new block)
                        break
                    j += 1
                
                if not found_except_or_finally:
                    # Add a generic except block
                    fixed_lines.append('    except Exception as e:\n')
                    fixed_lines.append('        print(f"Auto-added except: {e}")\n')
                    self.fixes_applied.append(f"Auto-added except block after try at line {i+1}")
            
            i += 1
        
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.writelines(fixed_lines)
    
    def fix_type_annotations(self):
        """Fix common type annotation issues"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        replacements = [
            (r'List\[Dict\]', 'List[Dict[str, Any]]'),
            (r'Dict\[str, Any\]', 'Dict[str, Any]'),  # This is actually correct
            (r'np\.ndarray(?!\[)', 'np.ndarray[Any, Any]'),
        ]
        
        for old, new in replacements:
            if re.search(old, content):
                content = re.sub(old, new, content)
                self.fixes_applied.append(f"Fixed type annotation: {old} -> {new}")
        
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def add_missing_imports(self):
        """Add missing imports that are commonly needed"""
        with open(self.file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Check if logging is imported but not configured
        if 'import logging' in content and 'logging.basicConfig' not in content:
            # Add basic logging configuration after imports
            import_section = content.split('\n\n')[0]  # Assume first block is imports
            rest_of_file = content[len(import_section):]
            
            logging_config = '''
# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
'''
            content = import_section + logging_config + rest_of_file
            self.fixes_applied.append("Added basic logging configuration")
        
        with open(self.file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def run_all_fixes(self):
        """Run all available fixes"""
        print(f"üîß Starting auto-fix for {self.file_path}")
        
        # Create backup first
        backup_path = self.create_backup()
        
        try:
            # Apply fixes in order
            self.fix_indentation_issues()
            self.fix_import_issues()
            self.fix_constant_issues()
            self.fix_try_except_blocks()
            self.fix_type_annotations()
            self.add_missing_imports()
            
            # Check if syntax is now valid
            if self.check_syntax():
                print("‚úÖ All fixes applied successfully!")
                print("üìã Fixes applied:")
                for fix in self.fixes_applied:
                    print(f"  - {fix}")
                return True
            else:
                print("‚ùå Syntax still invalid after fixes. Restoring backup.")
                shutil.copy2(backup_path, self.file_path)
                return False
                
        except Exception as e:
            print(f"‚ùå Error during auto-fix: {e}")
            print(traceback.format_exc())
            print("üîÑ Restoring backup...")
            shutil.copy2(backup_path, self.file_path)
            return False

def main():
    """Main function"""
    if len(sys.argv) != 2:
        print("Usage: python auto_fix_orchestrator.py <path_to_orchestrator.py>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    if not os.path.exists(file_path):
        print(f"‚ùå File not found: {file_path}")
        sys.exit(1)
    
    auto_fixer = AutoFixOrchestrator(file_path)
    success = auto_fixer.run_all_fixes()
    
    if success:
        print("üéâ Auto-fix completed successfully!")
        sys.exit(0)
    else:
        print("üí• Auto-fix failed. Check the backup file.")
        sys.exit(1)

if __name__ == "__main__":
    main()
