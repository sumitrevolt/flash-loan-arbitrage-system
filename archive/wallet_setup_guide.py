#!/usr/bin/env python3
"""
Wallet Setup and Security Guide
===============================

This guide helps you safely set up your wallet for AAVE flash loan live trading.

SECURITY WARNINGS:
- Never share your private key
- Use a dedicated wallet for trading (not your main wallet)
- Start with small amounts for testing
- Keep backups of your private key in a secure location
"""

def print_wallet_setup_guide():
    """Print comprehensive wallet setup instructions"""
    print("=" * 80)
    print("üîê WALLET SETUP FOR LIVE TRADING")
    print("=" * 80)
    
    print("\nüìã STEP 1: CREATE OR USE EXISTING WALLET")
    print("-" * 50)
    print("Option A - MetaMask:")
    print("1. Install MetaMask browser extension")
    print("2. Create new wallet or import existing")
    print("3. Switch to Polygon network")
    print("4. Export private key: Settings ‚Üí Security & Privacy ‚Üí Reveal Private Key")
    print()
    
    print("Option B - Generate New Wallet (Python):")
    print("1. Run: python -c \"from web3 import Web3; acc = Web3().eth.account.create(); print(f'Address: {acc.address}\\nPrivate Key: {acc.key.hex()}')\"")
    print("2. Save both address and private key securely")
    print("3. Add network to MetaMask using the address")
    print()
    
    print("üìã STEP 2: FUND WALLET")
    print("-" * 50)
    print("Minimum Requirements:")
    print("‚Ä¢ 0.5 MATIC - for gas fees and operations")
    print("‚Ä¢ Optional: Small amounts of tokens for testing")
    print("  - 10-50 USDC")
    print("  - 10-50 USDT") 
    print("  - 0.01-0.1 WETH")
    print()
    
    print("Funding Options:")
    print("‚Ä¢ Transfer from existing wallet")
    print("‚Ä¢ Buy on exchange and withdraw to Polygon")
    print("‚Ä¢ Use Polygon bridge from Ethereum")
    print("‚Ä¢ Use a faucet (testnet only)")
    print()
    
    print("üìã STEP 3: ADD PRIVATE KEY TO .env FILE")
    print("-" * 50)
    print("1. Open .env file in text editor")
    print("2. Add line: PRIVATE_KEY=your_private_key_here")
    print("3. Example: PRIVATE_KEY=0x1234567890abcdef...")
    print("4. Save file")
    print()
    
    print("‚ö†Ô∏è  SECURITY CHECKLIST:")
    print("-" * 50)
    print("‚úì Never commit .env file to version control")
    print("‚úì Use a dedicated trading wallet (not main wallet)")
    print("‚úì Start with small amounts for testing")
    print("‚úì Keep private key backup in secure location")
    print("‚úì Monitor all transactions in block explorer")
    print("‚úì Set reasonable gas price limits")
    print()
    
    print("üìã STEP 4: VERIFY SETUP")
    print("-" * 50)
    print("Run: python prepare_live_mode.py")
    print("This will verify:")
    print("‚Ä¢ Private key is set")
    print("‚Ä¢ Wallet is funded")
    print("‚Ä¢ Network connection works")
    print("‚Ä¢ All systems are ready")
    print()
    
    print("üìã STEP 5: EXECUTE TOKEN APPROVALS")
    print("-" * 50)
    print("1. Run: python execute_token_approvals.py")
    print("2. Review approval summary")
    print("3. Confirm with 'YES' when ready")
    print("4. Wait for all 20 approvals to complete")
    print("5. Verify all transactions succeeded")
    print()
    
    print("üìã STEP 6: START LIVE TRADING")
    print("-" * 50)
    print("1. Run: python demo_master_system.py")
    print("2. Monitor initial operations")
    print("3. Watch for profitable opportunities")
    print("4. Track performance and adjust settings")
    print()
    
    print("üö® EMERGENCY PROCEDURES:")
    print("-" * 50)
    print("If something goes wrong:")
    print("‚Ä¢ Stop all scripts (Ctrl+C)")
    print("‚Ä¢ Check wallet balance and transactions")
    print("‚Ä¢ Review logs for errors")
    print("‚Ä¢ Disable live mode: ENABLE_REAL_EXECUTION=false")
    print("‚Ä¢ Contact support with error details")

def generate_new_wallet():
    """Generate a new wallet for testing"""
    try:
        from web3 import Web3
        
        print("\nüîÑ GENERATING NEW WALLET")
        print("-" * 50)
        
        w3 = Web3()
        account = w3.eth.account.create()
        
        print(f"‚úÖ New wallet created!")
        print(f"üìç Address: {account.address}")
        print(f"üîê Private Key: {account.key.hex()}")
        print()
        print("‚ö†Ô∏è  IMPORTANT:")
        print("‚Ä¢ Save both address and private key securely")
        print("‚Ä¢ Never share the private key")
        print("‚Ä¢ Add to .env file as: PRIVATE_KEY=" + account.key.hex())
        print("‚Ä¢ Fund with MATIC before live trading")
        
    except Exception as e:
        print(f"‚ùå Error generating wallet: {e}")
        print("Install web3 with: pip install web3")

def main():
    """Main function"""
    print_wallet_setup_guide()
    
    print("\nüéØ QUICK ACTIONS:")
    print("1. Generate new wallet (g)")
    print("2. Just show guide (any other key)")
    
    choice = input("\nEnter choice: ").lower()
    
    if choice == 'g':
        generate_new_wallet()

if __name__ == "__main__":
    main()
