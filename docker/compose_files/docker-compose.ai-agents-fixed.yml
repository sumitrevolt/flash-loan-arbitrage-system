version: '3.8'

services:
  # AAVE Flash Loan Executor
  aave-executor:
    image: python:3.11-slim
    container_name: aave-flash-loan-executor
    ports:
      - "5001:5000"
    environment:
      - AGENT_ID=aave-executor
      - COORDINATOR_URL=http://localhost:9000
      - REDIS_URL=redis://localhost:6379
    command: >
      sh -c "
      pip install flask redis requests &&
      cat > agent.py << 'EOF'
      from flask import Flask, jsonify
      import redis
      import os
      from datetime import datetime
      
      app = Flask(__name__)
      
      try:
          r = redis.Redis(host='localhost', port=6379, decode_responses=True)
      except:
          r = None
      
      @app.route('/health')
      def health():
          return jsonify({
              'status': 'healthy',
              'agent': 'aave-executor',
              'timestamp': datetime.now().isoformat(),
              'redis_connected': r is not None
          })
      
      @app.route('/execute')
      def execute():
          return jsonify({
              'status': 'executed',
              'agent': 'aave-executor',
              'action': 'flash-loan',
              'timestamp': datetime.now().isoformat()
          })
      
      @app.route('/status')
      def status():
          return jsonify({
              'agent': 'aave-executor',
              'version': '1.0.0',
              'capabilities': ['flash-loans', 'arbitrage', 'liquidation']
          })
      
      if __name__ == '__main__':
          app.run(host='0.0.0.0', port=5000, debug=False)
      EOF
      python agent.py
      "
    restart: unless-stopped
    
  # Arbitrage Detector
  arbitrage-detector:
    image: python:3.11-slim
    container_name: arbitrage-detector
    ports:
      - "5002:5000"
    environment:
      - AGENT_ID=arbitrage-detector
      - COORDINATOR_URL=http://localhost:9000
    command: >
      sh -c "
      pip install flask requests &&
      cat > agent.py << 'EOF'
      from flask import Flask, jsonify
      import requests
      from datetime import datetime
      import random
      
      app = Flask(__name__)
      
      @app.route('/health')
      def health():
          return jsonify({
              'status': 'healthy',
              'agent': 'arbitrage-detector',
              'timestamp': datetime.now().isoformat()
          })
      
      @app.route('/detect')
      def detect():
          # Mock arbitrage opportunities
          opportunities = [
              {
                  'pair': 'ETH/USDC',
                  'dex1': 'uniswap',
                  'dex2': 'sushiswap',
                  'profit_percent': round(random.uniform(0.1, 2.0), 2),
                  'profit_usd': round(random.uniform(50, 500), 2)
              },
              {
                  'pair': 'BTC/USDT',
                  'dex1': 'curve',
                  'dex2': 'balancer',
                  'profit_percent': round(random.uniform(0.1, 1.5), 2),
                  'profit_usd': round(random.uniform(100, 800), 2)
              }
          ]
          
          return jsonify({
              'arbitrage_opportunities': opportunities,
              'timestamp': datetime.now().isoformat(),
              'total_opportunities': len(opportunities)
          })
      
      @app.route('/analyze')
      def analyze():
          return jsonify({
              'analysis': 'Market conditions favorable for arbitrage',
              'volatility': 'medium',
              'recommendation': 'Monitor closely'
          })
      
      if __name__ == '__main__':
          app.run(host='0.0.0.0', port=5000, debug=False)
      EOF
      python agent.py
      "
    restart: unless-stopped
    
  # Code Indexer
  code-indexer-1:
    image: python:3.11-slim
    container_name: code-indexer-1
    ports:
      - "5101:5000"
    environment:
      - AGENT_ID=code-indexer-1
      - COORDINATOR_URL=http://localhost:9000
    command: >
      sh -c "
      pip install flask &&
      cat > agent.py << 'EOF'
      from flask import Flask, jsonify
      from datetime import datetime
      import random
      
      app = Flask(__name__)
      
      @app.route('/health')
      def health():
          return jsonify({
              'status': 'healthy',
              'agent': 'code-indexer-1',
              'timestamp': datetime.now().isoformat()
          })
      
      @app.route('/index')
      def index():
          return jsonify({
              'indexed_files': random.randint(1000, 2000),
              'status': 'indexing',
              'languages': ['python', 'javascript', 'solidity'],
              'last_updated': datetime.now().isoformat()
          })
      
      @app.route('/search')
      def search():
          return jsonify({
              'results': [
                  {'file': 'contract.sol', 'type': 'smart_contract', 'functions': 15},
                  {'file': 'api.py', 'type': 'python_module', 'functions': 8},
                  {'file': 'frontend.js', 'type': 'javascript', 'functions': 12}
              ],
              'total_results': 3
          })
      
      @app.route('/stats')
      def stats():
          return jsonify({
              'total_files': random.randint(800, 1200),
              'total_functions': random.randint(5000, 8000),
              'total_lines': random.randint(50000, 80000)
          })
      
      if __name__ == '__main__':
          app.run(host='0.0.0.0', port=5000, debug=False)
      EOF
      python agent.py
      "
    restart: unless-stopped
