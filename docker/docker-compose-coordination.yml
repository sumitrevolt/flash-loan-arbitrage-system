networks:
  coordination_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  coordination_logs:

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: coordination_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      coordination_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: coordination_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: coordination
      RABBITMQ_DEFAULT_PASS: coordination_pass
      RABBITMQ_DEFAULT_VHOST: coordination
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      coordination_network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: coordination_postgres
    environment:
      POSTGRES_DB: coordination
      POSTGRES_USER: coordination
      POSTGRES_PASSWORD: coordination_pass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      coordination_network:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d coordination -U coordination"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Main Coordination System
  coordination_orchestrator:
    build:
      context: .
      dockerfile: docker/Dockerfile.coordination
    container_name: coordination_orchestrator
    environment:
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
      - POSTGRES_URL=postgresql://coordination:coordination_pass@coordination_postgres:5432/coordination
      - LANGCHAIN_ENABLED=true
      - AUTOGEN_ENABLED=true
      - MCP_SERVERS_COUNT=21
      - AI_AGENTS_COUNT=10
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./docker_coordination_system.py:/app/docker_coordination_system.py
      - ./unified_mcp_config.json:/app/unified_mcp_config.json
      - ./ai_agents_config.json:/app/ai_agents_config.json
      - coordination_logs:/app/logs
      - ./mcp_servers:/app/mcp_servers
      - ./src:/app/src
    networks:
      coordination_network:
        ipv4_address: 172.20.0.20
    depends_on:
      - redis
      - rabbitmq
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # LangChain Coordinator Agent
  langchain_coordinator:
    build:
      context: .
      dockerfile: docker/Dockerfile.langchain
    container_name: langchain_coordinator
    environment:
      - AGENT_TYPE=coordinator
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
      - OLLAMA_HOST=http://ollama:11434
    ports:
      - "8001:8000"
    volumes:
      - ./src/langchain_coordinators:/app/coordinators
      - coordination_logs:/app/logs
    networks:
      coordination_network:
        ipv4_address: 172.20.0.21
    depends_on:
      - redis
      - rabbitmq
      - ollama
    restart: unless-stopped

  # AutoGen Multi-Agent System
  autogen_system:
    build:
      context: .
      dockerfile: docker/Dockerfile.autogen
    container_name: autogen_system
    environment:
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
      - OPENAI_API_KEY=${OPENAI_API_KEY:-dummy_key}
      - OLLAMA_HOST=http://ollama:11434
    ports:
      - "8002:8000"
    volumes:
      - ./src/autogen_agents:/app/autogen_agents
      - coordination_logs:/app/logs
    networks:
      coordination_network:
        ipv4_address: 172.20.0.22
    depends_on:
      - redis
      - rabbitmq
      - ollama
    restart: unless-stopped

  # Ollama for Local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: coordination_ollama
    ports:
      - "11434:11434"
    volumes:
      - ./models:/root/.ollama
    networks:
      coordination_network:
        ipv4_address: 172.20.0.30
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # MCP Servers (21 servers)
  mcp_price_feed:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
      args:
        SERVER_NAME: enhanced_mcp_price_feed_server
    container_name: mcp_price_feed
    environment:
      - SERVER_TYPE=price_feed
      - PORT=8100
      - REDIS_URL=redis://coordination_redis:6379
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
    ports:
      - "8100:8100"
    networks:
      coordination_network:
        ipv4_address: 172.20.1.1
    depends_on:
      - redis
    restart: unless-stopped

  mcp_flash_loan:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
      args:
        SERVER_NAME: aave_flash_loan_mcp_server
    container_name: mcp_flash_loan
    environment:
      - SERVER_TYPE=flash_loan
      - PORT=8101
      - REDIS_URL=redis://coordination_redis:6379
      - ARBITRAGE_PRIVATE_KEY=${ARBITRAGE_PRIVATE_KEY}
    ports:
      - "8101:8101"
    networks:
      coordination_network:
        ipv4_address: 172.20.1.2
    depends_on:
      - redis
    restart: unless-stopped

  mcp_dex_aggregator:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
      args:
        SERVER_NAME: dex_aggregator_mcp_server
    container_name: mcp_dex_aggregator
    environment:
      - SERVER_TYPE=dex_aggregator
      - PORT=8102
      - REDIS_URL=redis://coordination_redis:6379
    ports:
      - "8102:8102"
    networks:
      coordination_network:
        ipv4_address: 172.20.1.3
    depends_on:
      - redis
    restart: unless-stopped

  mcp_evm_interaction:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
      args:
        SERVER_NAME: evm_mcp_server
    container_name: mcp_evm_interaction
    environment:
      - SERVER_TYPE=evm_interaction
      - PORT=8103
      - REDIS_URL=redis://coordination_redis:6379
    ports:
      - "8103:8103"
    networks:
      coordination_network:
        ipv4_address: 172.20.1.4
    depends_on:
      - redis
    restart: unless-stopped

  # AI Agents (10 agents)
  agent_arbitrage_detector:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: arbitrage_detector
    container_name: agent_arbitrage_detector
    environment:
      - AGENT_TYPE=arbitrage_detector
      - PORT=9001
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9001:9001"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.1
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_risk_manager:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: risk_manager
    container_name: agent_risk_manager
    environment:
      - AGENT_TYPE=risk_manager
      - PORT=9002
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9002:9002"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.2
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_flash_loan_optimizer:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: flash_loan_optimizer
    container_name: agent_flash_loan_optimizer
    environment:
      - AGENT_TYPE=flash_loan_optimizer
      - PORT=9003
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9003:9003"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.3
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_transaction_executor:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: transaction_executor
    container_name: agent_transaction_executor
    environment:
      - AGENT_TYPE=transaction_executor
      - PORT=9004
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9004:9004"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.4
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_market_analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: market_analyzer
    container_name: agent_market_analyzer
    environment:
      - AGENT_TYPE=market_analyzer
      - PORT=9005
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9005:9005"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.5
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_route_optimizer:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: route_optimizer
    container_name: agent_route_optimizer
    environment:
      - AGENT_TYPE=route_optimizer
      - PORT=9006
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9006:9006"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.6
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_gas_optimizer:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: gas_optimizer
    container_name: agent_gas_optimizer
    environment:
      - AGENT_TYPE=gas_optimizer
      - PORT=9007
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9007:9007"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.7
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_liquidity_monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: liquidity_monitor
    container_name: agent_liquidity_monitor
    environment:
      - AGENT_TYPE=liquidity_monitor
      - PORT=9008
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9008:9008"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.8
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_security_analyst:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: security_analyst
    container_name: agent_security_analyst
    environment:
      - AGENT_TYPE=security_analyst
      - PORT=9009
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9009:9009"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.9
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  agent_compliance_checker:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      args:
        AGENT_NAME: compliance_checker
    container_name: agent_compliance_checker
    environment:
      - AGENT_TYPE=compliance_checker
      - PORT=9010
      - REDIS_URL=redis://coordination_redis:6379
      - RABBITMQ_URL=amqp://coordination:coordination_pass@coordination_rabbitmq:5672/coordination
    ports:
      - "9010:9010"
    networks:
      coordination_network:
        ipv4_address: 172.20.2.10
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped

  # Dashboard and Monitoring
  coordination_dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: coordination_dashboard
    environment:
      - REDIS_URL=redis://coordination_redis:6379
      - POSTGRES_URL=postgresql://coordination:coordination_pass@coordination_postgres:5432/coordination
    ports:
      - "8080:8080"
    volumes:
      - ./dashboard:/app/dashboard
      - coordination_logs:/app/logs
    networks:
      coordination_network:
        ipv4_address: 172.20.0.40
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: coordination_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - ./dashboards:/var/lib/grafana/dashboards
    networks:
      coordination_network:
        ipv4_address: 172.20.0.50
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: coordination_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      coordination_network:
        ipv4_address: 172.20.0.51
    restart: unless-stopped

  # Health Monitor
  health_monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.health
    container_name: coordination_health_monitor
    environment:
      - REDIS_URL=redis://coordination_redis:6379
      - CHECK_INTERVAL=30
    volumes:
      - coordination_logs:/app/logs
    networks:
      coordination_network:
        ipv4_address: 172.20.0.60
    depends_on:
      - redis
    restart: unless-stopped

  # Log Aggregator
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: coordination_logstash
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - coordination_logs:/logs
    networks:
      coordination_network:
        ipv4_address: 172.20.0.70
    restart: unless-stopped
