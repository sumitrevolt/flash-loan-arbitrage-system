{
  "total_servers": 84,
  "working_servers": 83,
  "categories": {
    "ai_integration": [
      {
        "name": "context7-mcp-server",
        "file_path": "mcp_servers\\ai_integration\\clean_context7_mcp_server.py",
        "category": "ai_integration",
        "port": null,
        "dependencies": [
          "",
          "# Development and testing",
          "mypy>=1.8.0",
          "alembic>=1.13.0",
          "psutil>=5.9.0",
          "fastmcp>=0.9.0",
          "pytest>=7.4.0",
          "structlog>=23.0.0",
          "# Web framework and HTTP client",
          "websockets>=12.0",
          "# AI and ML capabilities",
          "paramiko>=3.4.0",
          "typer>=0.9.0",
          "asyncio",
          "threading",
          "# Core MCP requirements",
          "# Async and concurrency",
          "sqlite3",
          "# Security",
          "pytest-asyncio>=0.21.0",
          "jwt>=1.3.1",
          "torch>=2.0.0",
          "# Logging and monitoring",
          "pandas>=2.0.0",
          "queue",
          "aiohttp>=3.9.0",
          "concurrent.futures",
          "requests>=2.31.0",
          "# Configuration and serialization",
          "APScheduler>=3.10.0",
          "pytest-mock>=3.12.0",
          "flake8>=6.1.0",
          "invoke>=2.2.0",
          "# System monitoring and metrics",
          "redis>=5.0.0",
          "fabric>=3.2.0",
          "cryptography>=41.0.0",
          "black>=23.0.0",
          "mcp>=1.0.0",
          "python-dotenv>=1.0.0",
          "py-cpuinfo>=9.0.0",
          "celery>=5.3.0",
          "numpy>=1.24.0",
          "# Scheduling and task management",
          "prometheus-client>=0.19.0",
          "# Grok 3 MCP Server Requirements",
          "loguru>=0.7.0",
          "toml>=0.10.0",
          "# Utilities",
          "scikit-learn>=1.3.0",
          "# Database and data handling",
          "configparser",
          "rich>=13.7.0",
          "tensorflow>=2.13.0",
          "# Network and communication",
          "pyyaml>=6.0",
          "Any",
          "# Advanced coordination and agentic capabilities",
          "bcrypt>=4.1.0",
          "click>=8.1.0",
          "sqlalchemy>=2.0.0",
          "httpx>=0.26.0"
        ],
        "tools": [
          "_setup_tool",
          "call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\ai_integration\\grok3_mcp_server.py",
        "category": "ai_integration",
        "port": 3003,
        "dependencies": [
          "",
          "mypy>=1.8.0",
          "InitializationOptions",
          "alembic>=1.13.0",
          "the",
          "# Web framework and HTTP client",
          "websockets>=12.0",
          "paramiko>=3.4.0",
          "threading",
          "# Security",
          "torch>=2.0.0",
          "queue",
          "requests>=2.31.0",
          "# System monitoring and metrics",
          "mcp>=1.0.0",
          "psutil",
          "prometheus-client>=0.19.0",
          "# Scheduling and task management",
          "configparser",
          "FastMCP",
          "httpx>=0.26.0",
          "fastmcp>=0.9.0",
          "structlog>=23.0.0",
          "subprocess",
          "# AI and ML capabilities",
          "# Core MCP requirements",
          "datetime",
          "dataclass",
          "asynccontextmanager",
          "aiohttp>=3.9.0",
          "NotificationOptions",
          "# Utilities",
          "# Configuration and serialization",
          "python-dotenv>=1.0.0",
          "aiohttp",
          "signal",
          "Queue",
          "toml>=0.10.0",
          "scikit-learn>=1.3.0",
          "# Database and data handling",
          "dataclasses",
          "Any",
          "click>=8.1.0",
          "psutil>=5.9.0",
          "asyncio",
          "ThreadPoolExecutor",
          "websockets",
          "rich>=13.7.0",
          "APScheduler>=3.10.0",
          "Path",
          "cryptography>=41.0.0",
          "# Development and testing",
          "sqlalchemy>=2.0.0",
          "time",
          "pytest>=7.4.0",
          "typer>=0.9.0",
          "requests",
          "contextlib",
          "mcp",
          "concurrent",
          "# Async and concurrency",
          "sqlite3",
          "pytest-asyncio>=0.21.0",
          "jwt>=1.3.1",
          "# Logging and monitoring",
          "pandas>=2.0.0",
          "concurrent.futures",
          "flake8>=6.1.0",
          "pytest-mock>=3.12.0",
          "uuid",
          "invoke>=2.2.0",
          "redis>=5.0.0",
          "fabric>=3.2.0",
          "black>=23.0.0",
          "py-cpuinfo>=9.0.0",
          "overloaded",
          "celery>=5.3.0",
          "numpy>=1.24.0",
          "# Grok 3 MCP Server Requirements",
          "loguru>=0.7.0",
          "yaml",
          "tensorflow>=2.13.0",
          "# Network and communication",
          "pyyaml>=6.0",
          "# Advanced coordination and agentic capabilities",
          "bcrypt>=4.1.0",
          "traceback"
        ],
        "tools": [
          "_register_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "start-grok3",
        "file_path": "mcp_servers\\ai_integration\\start_grok3.py",
        "category": "ai_integration",
        "port": null,
        "dependencies": [
          "",
          "# Development and testing",
          "mypy>=1.8.0",
          "alembic>=1.13.0",
          "psutil>=5.9.0",
          "fastmcp>=0.9.0",
          "pytest>=7.4.0",
          "structlog>=23.0.0",
          "# Web framework and HTTP client",
          "websockets>=12.0",
          "# AI and ML capabilities",
          "paramiko>=3.4.0",
          "typer>=0.9.0",
          "grok3_mcp_server",
          "subprocess",
          "asyncio",
          "threading",
          "# Core MCP requirements",
          "Grok3MCPServer",
          "# Async and concurrency",
          "sqlite3",
          "# Security",
          "pytest-asyncio>=0.21.0",
          "jwt>=1.3.1",
          "torch>=2.0.0",
          "# Logging and monitoring",
          "pandas>=2.0.0",
          "queue",
          "Path",
          "aiohttp>=3.9.0",
          "concurrent.futures",
          "requests>=2.31.0",
          "# Configuration and serialization",
          "APScheduler>=3.10.0",
          "pytest-mock>=3.12.0",
          "flake8>=6.1.0",
          "invoke>=2.2.0",
          "# System monitoring and metrics",
          "redis>=5.0.0",
          "fabric>=3.2.0",
          "cryptography>=41.0.0",
          "black>=23.0.0",
          "mcp>=1.0.0",
          "python-dotenv>=1.0.0",
          "our",
          "py-cpuinfo>=9.0.0",
          "socket",
          "for",
          "warning",
          "celery>=5.3.0",
          "numpy>=1.24.0",
          "# Scheduling and task management",
          "prometheus-client>=0.19.0",
          "main",
          "# Grok 3 MCP Server Requirements",
          "loguru>=0.7.0",
          "toml>=0.10.0",
          "List",
          "# Utilities",
          "scikit-learn>=1.3.0",
          "# Database and data handling",
          "configparser",
          "rich>=13.7.0",
          "tensorflow>=2.13.0",
          "# Network and communication",
          "pyyaml>=6.0",
          "# Advanced coordination and agentic capabilities",
          "bcrypt>=4.1.0",
          "click>=8.1.0",
          "sqlalchemy>=2.0.0",
          "httpx>=0.26.0"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "WorkingCopilotMCPServer",
        "file_path": "mcp_servers\\ai_integration\\working_enhanced_copilot_mcp_server.py",
        "category": "ai_integration",
        "port": null,
        "dependencies": [
          "",
          "# Development and testing",
          "mypy>=1.8.0",
          "alembic>=1.13.0",
          "psutil>=5.9.0",
          "fastmcp>=0.9.0",
          "pytest>=7.4.0",
          "structlog>=23.0.0",
          "# Web framework and HTTP client",
          "websockets>=12.0",
          "# AI and ML capabilities",
          "paramiko>=3.4.0",
          "typer>=0.9.0",
          "asyncio",
          "threading",
          "# Core MCP requirements",
          "# Async and concurrency",
          "sqlite3",
          "# Security",
          "pytest-asyncio>=0.21.0",
          "jwt>=1.3.1",
          "torch>=2.0.0",
          "# Logging and monitoring",
          "pandas>=2.0.0",
          "queue",
          "aiohttp>=3.9.0",
          "concurrent.futures",
          "requests>=2.31.0",
          "# Configuration and serialization",
          "APScheduler>=3.10.0",
          "pytest-mock>=3.12.0",
          "flake8>=6.1.0",
          "invoke>=2.2.0",
          "# System monitoring and metrics",
          "redis>=5.0.0",
          "fabric>=3.2.0",
          "cryptography>=41.0.0",
          "black>=23.0.0",
          "mcp>=1.0.0",
          "python-dotenv>=1.0.0",
          "py-cpuinfo>=9.0.0",
          "celery>=5.3.0",
          "numpy>=1.24.0",
          "# Scheduling and task management",
          "prometheus-client>=0.19.0",
          "# Grok 3 MCP Server Requirements",
          "loguru>=0.7.0",
          "toml>=0.10.0",
          "# Utilities",
          "scikit-learn>=1.3.0",
          "# Database and data handling",
          "configparser",
          "rich>=13.7.0",
          "tensorflow>=2.13.0",
          "# Network and communication",
          "pyyaml>=6.0",
          "# Advanced coordination and agentic capabilities",
          "bcrypt>=4.1.0",
          "click>=8.1.0",
          "sqlalchemy>=2.0.0",
          "httpx>=0.26.0"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "context7-mcp-server",
        "file_path": "mcp_servers\\ai_integration\\context7-mcp-server\\context7_mcp_server.py",
        "category": "ai_integration",
        "port": 8004,
        "dependencies": [
          "defaultdict",
          "InitializationOptions",
          "datetime",
          "Flask",
          "stdio_server",
          "dataclass",
          "re",
          "dataclasses",
          "Tool",
          "NotificationOptions",
          "flask",
          "AnyUrl",
          "mcp",
          "collections",
          "aiohttp",
          "threading",
          "pydantic",
          "Dict"
        ],
        "tools": [
          "analyze_content_intelligence",
          "handle_list_tool",
          "get_relevant_context",
          "create_context_session",
          "get_context_analytics",
          "add_context_item",
          "handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      }
    ],
    "blockchain_integration": [
      {
        "name": "matic-mcp-server",
        "file_path": "mcp_servers\\blockchain_integration\\clean_matic_mcp_server.py",
        "category": "blockchain_integration",
        "port": null,
        "dependencies": [
          "datetime",
          "Any"
        ],
        "tools": [
          "_setup_tool",
          "call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "matic-mcp",
        "file_path": "mcp_servers\\blockchain_integration\\matic_mcp_server.py",
        "category": "blockchain_integration",
        "port": null,
        "dependencies": [
          "datetime",
          "Any"
        ],
        "tools": [
          "call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "WorkingFoundryMCPServer",
        "file_path": "mcp_servers\\blockchain_integration\\working_enhanced_foundry_mcp_server.py",
        "category": "blockchain_integration",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "working-flash-loan-mcp",
        "file_path": "mcp_servers\\blockchain_integration\\working_flash_loan_mcp.py",
        "category": "blockchain_integration",
        "port": null,
        "dependencies": [],
        "tools": [
          "handle_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "evm-mcp-server",
        "file_path": "mcp_servers\\blockchain_integration\\evm-mcp-server\\evm_mcp_server.py",
        "category": "blockchain_integration",
        "port": 8003,
        "dependencies": [],
        "tools": [
          "get_cross_chain_analysis",
          "decode_transaction",
          "handle_list_tool",
          "estimate_gas_costs",
          "simulate_transaction",
          "check_contract_verification",
          "get_evm_network_status",
          "handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "matic-mcp-server",
        "file_path": "mcp_servers\\blockchain_integration\\matic-mcp-server\\matic_mcp_server.py",
        "category": "blockchain_integration",
        "port": 8002,
        "dependencies": [],
        "tools": [
          "handle_list_tool",
          "get_polygon_network_status",
          "get_matic_price",
          "execute_polygon_transaction",
          "get_dex_liquidity",
          "get_polygon_gas_tracker",
          "handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      }
    ],
    "coordination": [
      {
        "name": "MCP Master Coordinator",
        "file_path": "mcp_servers\\coordination\\mcp_enhanced_coordinator.py",
        "category": "coordination",
        "port": 3000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "_query_mcp_server",
        "file_path": "mcp_servers\\coordination\\mcp_integration_bridge.py",
        "category": "coordination",
        "port": 8007,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCP Master Coordinator",
        "file_path": "mcp_servers\\coordination\\mcp_server_coordinator.py",
        "category": "coordination",
        "port": 3000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\coordination\\unified_mcp_coordinator.py",
        "category": "coordination",
        "port": null,
        "dependencies": [
          "dotenv",
          "all",
          "subprocess",
          "datetime",
          "dataclass",
          "a",
          "profit",
          "Path",
          "aiohttp",
          "our",
          "socket",
          "load_dotenv",
          "Dict",
          "signal",
          "platform",
          "Flask",
          "flask_cors",
          "Decimal",
          "FrameType",
          "flask",
          "CORS",
          "symbol",
          "dataclasses",
          "decimal",
          "types"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "data_providers": [
      {
        "name": "DEXPriceMCPServer",
        "file_path": "mcp_servers\\data_providers\\dex_price_mcp_server.py",
        "category": "data_providers",
        "port": null,
        "dependencies": [
          "datetime",
          "flask_cors",
          "Flask",
          "time",
          "flask",
          "dex_price_monitor",
          "price_monitor",
          "TypedDict",
          "CORS",
          "JSON",
          "threading"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "price-oracle-mcp-server",
        "file_path": "mcp_servers\\data_providers\\price-oracle-mcp-server\\price_oracle_mcp_server.py",
        "category": "data_providers",
        "port": 8005,
        "dependencies": [],
        "tools": [
          "create_price_alert",
          "get_market_analysis",
          "get_oracle_health",
          "handle_list_tool",
          "get_price_history",
          "get_aggregated_price",
          "handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      }
    ],
    "dex_services": [
      {
        "name": "DEXPriceMCPServer",
        "file_path": "mcp_servers\\dex_services\\dex_price_mcp_server.py",
        "category": "dex_services",
        "port": null,
        "dependencies": [
          "datetime",
          "flask_cors",
          "Flask",
          "time",
          "flask",
          "dex_price_monitor",
          "price_monitor",
          "TypedDict",
          "CORS",
          "JSON",
          "threading"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "evm-mcp-server": [
      {
        "name": "EVMMCPServer",
        "file_path": "mcp_servers\\evm-mcp-server\\evm_mcp_server.py",
        "category": "evm-mcp-server",
        "port": null,
        "dependencies": [
          "DEXs",
          "web",
          "time",
          "aiohttp",
          "file",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "execution": [
      {
        "name": "MCPContractExecutorServer",
        "file_path": "mcp_servers\\execution\\mcp_contract_executor_server.py",
        "category": "execution",
        "port": 3005,
        "dependencies": [
          "datetime",
          "web",
          "time",
          "Web3",
          "eth_account",
          "Account",
          "strategy",
          "Dict",
          "aiohttp",
          "network",
          "web3"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPFlashLoanStrategistServer",
        "file_path": "mcp_servers\\execution\\mcp_flash_loan_strategist_server.py",
        "category": "execution",
        "port": 3004,
        "dependencies": [
          "datetime",
          "web",
          "numpy",
          "aiohttp",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPTransactionOptimizerServer",
        "file_path": "mcp_servers\\execution\\mcp_transaction_optimizer_server.py",
        "category": "execution",
        "port": 3006,
        "dependencies": [
          "datetime",
          "web",
          "optimization",
          "numpy",
          "success",
          "aiohttp",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "WorkingUnifiedFlashLoanMCPServer",
        "file_path": "mcp_servers\\execution\\working_unified_flash_loan_mcp_server.py",
        "category": "execution",
        "port": null,
        "dependencies": [],
        "tools": [
          "check_foundry_tool"
        ],
        "working": true,
        "docker_ready": false
      }
    ],
    "foundry_integration": [
      {
        "name": "WorkingFoundryMCPServer",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\working_enhanced_foundry_mcp_server.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "",
          "dataclasses-json>=0.5.7",
          "send2trash>=1.8.0",
          "psutil>=5.9.0",
          "structlog>=23.0.0",
          "black>=22.3.0",
          "typing-extensions>=4.0.0",
          "pytest-asyncio>=0.20.0",
          "pydantic>=2.0.0",
          "slither-analyzer>=0.9.0",
          "fastapi>=0.100.0",
          "prometheus-client>=0.16.0",
          "# Integration with existing system",
          "eth-account>=0.10.0",
          "safety>=2.3.5",
          "# MCP package for Model Context Protocol support",
          "# Logging and monitoring",
          "# Core Dependencies",
          "tenacity>=8.0.0",
          "pytest-cov>=3.0.0",
          "websockets>=11.0",
          "pytest>=7.0.0",
          "# File management and utilities",
          "python-dotenv>=1.0.0",
          "bandit>=1.7.5",
          "mcp>=1.0.0",
          "# Data handling and validation",
          "jsonschema>=4.0.0",
          "asyncio-mqtt>=0.11.0",
          "web3>=7.0.0",
          "aiohttp>=3.8.0",
          "pathlib>=1.0.1",
          "mcp-server>=0.1.4",
          "requests>=2.26.0",
          "# Configuration management",
          "pyyaml>=6.0.1",
          "# Security tools integration",
          "uvicorn[standard]>=0.20.0",
          "# Async utilities",
          "flake8>=4.0.1",
          "toml>=0.10.2",
          "# Development and testing",
          "watchdog>=3.0.0"
        ],
        "tools": [],
        "working": true,
        "docker_ready": true
      },
      {
        "name": "revenue-optimizer",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\integration\\revenue_optimizer.py",
        "category": "foundry_integration",
        "port": 8001,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "--init--",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\__init__.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "FoundryMCPServer",
          "ConfigLoader",
          "setup_logger"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "--main--",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\__main__.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "main",
          "server",
          "Path"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "event-system",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\bridge\\event_system.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "defaultdict",
          "AsyncQueue",
          "queue",
          "Any",
          "an",
          "collections",
          "callback"
        ],
        "tools": [
          "publish_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "connection-manager",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\connection_manager.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "AsyncLock",
          "registry",
          "Any",
          "Path"
        ],
        "tools": [
          "_handle_list_tool",
          "_handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "error-handler",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\error_handler.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "time",
          "enum",
          "Any",
          "Enum",
          "traceback"
        ],
        "tools": [
          "_handle_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "tool-registry",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\tool_registry.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [],
        "tools": [
          "create_tool",
          "list_tool",
          "execute_tool",
          "get_tool",
          "_initialize_single_tool",
          "deactivate_tool",
          "_initialize_tool",
          "activate_tool",
          "_handle_tool",
          "register_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "--init--",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\__init__.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "FoundryMCPServer",
          "ConnectionManager",
          "ToolRegistry",
          "ErrorHandler"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "--init--",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\tools\\__init__.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "async-utils",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\async_utils.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "the",
          "functools",
          "queue",
          "Any"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "config-loader",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\config_loader.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "e",
          "yaml",
          "BaseModel",
          "re",
          "Any",
          "Path",
          "file",
          "pydantic",
          "toml"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "logger",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\logger.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "Optional",
          "Path"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "--init--",
        "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\__init__.py",
        "category": "foundry_integration",
        "port": null,
        "dependencies": [
          "run_with_timeout",
          "setup_logger",
          "ConfigLoader"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "legacy": [
      {
        "name": "risk-management-mcp-server",
        "file_path": "mcp_servers\\legacy\\risk_management_variations\\risk_management_mcp_server.py",
        "category": "legacy",
        "port": null,
        "dependencies": [],
        "tools": [
          "calculate_position_risk",
          "get_risk_dashboard",
          "handle_list_tool",
          "calculate_portfolio_risk",
          "create_risk_alert",
          "simulate_position_change",
          "handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "RiskManagementMCPServer",
        "file_path": "mcp_servers\\legacy\\risk_management_variations\\risk_management_mcp_server_clean.py",
        "category": "legacy",
        "port": null,
        "dependencies": [
          "math",
          "defaultdict",
          "datetime",
          "Decimal",
          "dataclass",
          "dataclasses",
          "decimal",
          "enum",
          "Enum",
          "collections",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "RiskManagementMCPServer",
        "file_path": "mcp_servers\\legacy\\risk_management_variations\\risk_management_mcp_server_fixed.py",
        "category": "legacy",
        "port": null,
        "dependencies": [
          "math",
          "defaultdict",
          "datetime",
          "Decimal",
          "dataclass",
          "price",
          "dataclasses",
          "decimal",
          "enum",
          "Enum",
          "collections",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "market_analysis": [
      {
        "name": "MCPLiquidityMonitorServer",
        "file_path": "mcp_servers\\market_analysis\\mcp_liquidity_monitor_server.py",
        "category": "market_analysis",
        "port": null,
        "dependencies": [
          "address",
          "datetime",
          "web",
          "dataclass",
          "all",
          "dataclasses",
          "aiohttp",
          "mcp",
          "FastMCP",
          "aioredis",
          "Dict"
        ],
        "tools": [
          "_register_tool"
        ],
        "working": false,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\market_analysis\\mcp_shared_utilities.py",
        "category": "market_analysis",
        "port": 6379,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPTokenScannerServer",
        "file_path": "mcp_servers\\market_analysis\\mcp_token_scanner_server.py",
        "category": "market_analysis",
        "port": 3001,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "matic-mcp-server": [
      {
        "name": "MaticMCPServer",
        "file_path": "mcp_servers\\matic-mcp-server\\matic_mcp_server.py",
        "category": "matic-mcp-server",
        "port": null,
        "dependencies": [
          "web",
          "time",
          "aiohttp",
          "file",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "monitoring": [
      {
        "name": "check-mcp-status",
        "file_path": "mcp_servers\\monitoring\\check-mcp-status.py",
        "category": "monitoring",
        "port": 8007,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "check-mcp-status",
        "file_path": "mcp_servers\\monitoring\\check_mcp_status.py",
        "category": "monitoring",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "mcp-stability-report",
        "file_path": "mcp_servers\\monitoring\\mcp-stability-report.py",
        "category": "monitoring",
        "port": 8007,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "TaskManager-MCP",
        "file_path": "mcp_servers\\monitoring\\mcp_server_checker.py",
        "category": "monitoring",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "mcp-status-demo",
        "file_path": "mcp_servers\\monitoring\\mcp_status_demo.py",
        "category": "monitoring",
        "port": 8007,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "check_mcp_server",
        "file_path": "mcp_servers\\monitoring\\quick_mcp_check.py",
        "category": "monitoring",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "verify-mcp-organization",
        "file_path": "mcp_servers\\monitoring\\verify_mcp_organization.py",
        "category": "monitoring",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "test_mcp_server",
        "file_path": "mcp_servers\\monitoring\\verify_mcp_servers.py",
        "category": "monitoring",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "verify-mcp-status",
        "file_path": "mcp_servers\\monitoring\\verify_mcp_status.py",
        "category": "monitoring",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "orchestration": [
      {
        "name": "Foundry MCP Server",
        "file_path": "mcp_servers\\orchestration\\create_final_unified_mcp_manager.py",
        "category": "orchestration",
        "port": 8001,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "viewport",
        "file_path": "mcp_servers\\orchestration\\enhanced_production_mcp_server_v2.py",
        "category": "orchestration",
        "port": 8000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCP Master Coordinator",
        "file_path": "mcp_servers\\orchestration\\mcp_enhanced_coordinator.py",
        "category": "orchestration",
        "port": 3000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPMasterCoordinatorServer",
        "file_path": "mcp_servers\\orchestration\\mcp_master_coordinator_server.py",
        "category": "orchestration",
        "port": 3000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCP Master Coordinator",
        "file_path": "mcp_servers\\orchestration\\mcp_server_coordinator_backup.py",
        "category": "orchestration",
        "port": 3000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCP Master Coordinator",
        "file_path": "mcp_servers\\orchestration\\mcp_server_coordinator_fixed.py",
        "category": "orchestration",
        "port": 3000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCP Master Coordinator",
        "file_path": "mcp_servers\\orchestration\\mcp_unified_config.py",
        "category": "orchestration",
        "port": 3000,
        "dependencies": [
          "datetime",
          "dataclass",
          "dataclasses",
          "JSON",
          "Path",
          "Dict",
          "dictionary",
          "environment"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "Task Manager MCP",
        "file_path": "mcp_servers\\orchestration\\simplified_mcp_coordinator_backup.py",
        "category": "orchestration",
        "port": 8009,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "Task Manager MCP",
        "file_path": "mcp_servers\\orchestration\\simplified_mcp_coordinator_fixed.py",
        "category": "orchestration",
        "port": 8009,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\orchestration\\unified_mcp_coordinator.py",
        "category": "orchestration",
        "port": null,
        "dependencies": [
          "dotenv",
          "all",
          "subprocess",
          "datetime",
          "dataclass",
          "a",
          "profit",
          "Path",
          "aiohttp",
          "our",
          "socket",
          "load_dotenv",
          "Dict",
          "signal",
          "platform",
          "Flask",
          "flask_cors",
          "Decimal",
          "FrameType",
          "flask",
          "CORS",
          "symbol",
          "dataclasses",
          "decimal",
          "types"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "taskmanager",
        "file_path": "mcp_servers\\orchestration\\unified_mcp_integration_manager.py",
        "category": "orchestration",
        "port": 8001,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "production": [
      {
        "name": "viewport",
        "file_path": "mcp_servers\\production\\enhanced_production_mcp_server_v2.py",
        "category": "production",
        "port": 8000,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "quality": [
      {
        "name": "code-quality-checker-agent",
        "file_path": "mcp_servers\\quality\\code_quality_checker_agent.py",
        "category": "quality",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "recovery": [
      {
        "name": "recovery-agent",
        "file_path": "mcp_servers\\recovery\\recovery_agent.py",
        "category": "recovery",
        "port": 8080,
        "dependencies": [
          "datetime",
          "dataclass",
          "BaseModel",
          "CORSMiddleware",
          "dataclasses",
          "asynccontextmanager",
          "pydantic",
          "fastapi",
          "contextlib",
          "Dict",
          "uvicorn",
          "FastAPI",
          "psutil"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "risk_management": [
      {
        "name": "create_log_entry",
        "file_path": "mcp_servers\\risk_management\\mcp_logger_auditor_server.py",
        "category": "risk_management",
        "port": null,
        "dependencies": [
          "import",
          "traceback",
          "datetime",
          "csv",
          "Server",
          "time",
          "dataclass",
          "stdio_server",
          "dataclasses",
          "Tool",
          "Any",
          "mcp",
          "Path",
          "aioredis",
          "psutil"
        ],
        "tools": [
          "list_tool",
          "generate_report",
          "get_system_health",
          "search_logs",
          "call_tool",
          "get_performance_metrics",
          "get_audit_trail",
          "create_log_entry",
          "export_logs"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPRiskManagerServer",
        "file_path": "mcp_servers\\risk_management\\mcp_risk_manager_server.py",
        "category": "risk_management",
        "port": 3007,
        "dependencies": [
          "math",
          "datetime",
          "web",
          "dataclass",
          "dataclasses",
          "numpy",
          "aiohttp",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "risk-management-mcp-server",
        "file_path": "mcp_servers\\risk_management\\risk-management-mcp-server\\risk_management_mcp_server.py",
        "category": "risk_management",
        "port": null,
        "dependencies": [],
        "tools": [
          "calculate_position_risk",
          "get_risk_dashboard",
          "handle_list_tool",
          "calculate_portfolio_risk",
          "create_risk_alert",
          "simulate_position_change",
          "handle_call_tool"
        ],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "RiskManagementMCPServer",
        "file_path": "mcp_servers\\risk_management\\risk-management-mcp-server\\risk_management_mcp_server_clean.py",
        "category": "risk_management",
        "port": null,
        "dependencies": [
          "math",
          "defaultdict",
          "datetime",
          "Decimal",
          "dataclass",
          "dataclasses",
          "decimal",
          "enum",
          "Enum",
          "collections",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "RiskManagementMCPServer",
        "file_path": "mcp_servers\\risk_management\\risk-management-mcp-server\\risk_management_mcp_server_fixed.py",
        "category": "risk_management",
        "port": null,
        "dependencies": [
          "math",
          "defaultdict",
          "datetime",
          "Decimal",
          "dataclass",
          "price",
          "dataclasses",
          "decimal",
          "enum",
          "Enum",
          "collections",
          "Dict"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "scripts": [
      {
        "name": "mcp-simple-startup",
        "file_path": "mcp_servers\\scripts\\mcp_simple_startup.py",
        "category": "scripts",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\scripts\\organize_mcp_servers.py",
        "category": "scripts",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\scripts\\start-stable-mcp-servers.py",
        "category": "scripts",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "ui": [
      {
        "name": "viewport",
        "file_path": "mcp_servers\\ui\\enhanced_mcp_dashboard_with_chat.py",
        "category": "ui",
        "port": 8004,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "Master Coordinator",
        "file_path": "mcp_servers\\ui\\mcp_dashboard_server.py",
        "category": "ui",
        "port": 8001,
        "dependencies": [],
        "tools": [
          "list_tool",
          "call_tool",
          "manage_alert_rules",
          "get_api_gateway_stats",
          "send_system_command",
          "get_dashboard_status",
          "proxy_mcp_request"
        ],
        "working": true,
        "docker_ready": false
      }
    ],
    "unified_mcp_coordinator.py": [
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\unified_mcp_coordinator.py\\unified_mcp_coordinator.py",
        "category": "unified_mcp_coordinator.py",
        "port": null,
        "dependencies": [
          "dotenv",
          "all",
          "subprocess",
          "datetime",
          "dataclass",
          "a",
          "profit",
          "Path",
          "aiohttp",
          "our",
          "socket",
          "load_dotenv",
          "Dict",
          "signal",
          "platform",
          "Flask",
          "flask_cors",
          "Decimal",
          "FrameType",
          "flask",
          "CORS",
          "symbol",
          "dataclasses",
          "decimal",
          "types"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "utilities": [
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\utilities\\mcp_shared_utilities.py",
        "category": "utilities",
        "port": 6379,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      }
    ],
    "utils": [
      {
        "name": "TaskManager-MCP",
        "file_path": "mcp_servers\\utils\\mcp_server_checker.py",
        "category": "utils",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\utils\\mcp_server_template.py",
        "category": "utils",
        "port": null,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\utils\\mcp_shared_utilities.py",
        "category": "utils",
        "port": 6379,
        "dependencies": [],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "start-alls",
        "file_path": "mcp_servers\\utils\\start_all_mcp_servers.py",
        "category": "utils",
        "port": null,
        "dependencies": [
          "PRODUCTION_LAUNCHER",
          "path",
          "ProductionLauncher",
          "Path"
        ],
        "tools": [],
        "working": true,
        "docker_ready": false
      },
      {
        "name": "MCPServer",
        "file_path": "mcp_servers\\utils\\working_mcp_server_template.py",
        "category": "utils",
        "port": null,
        "dependencies": [
          "Any"
        ],
        "tools": [
          "call_tool",
          "echo",
          "add_tool"
        ],
        "working": true,
        "docker_ready": false
      }
    ]
  },
  "servers": [
    {
      "name": "context7-mcp-server",
      "file_path": "mcp_servers\\ai_integration\\clean_context7_mcp_server.py",
      "category": "ai_integration",
      "port": null,
      "dependencies": [
        "",
        "# Development and testing",
        "mypy>=1.8.0",
        "alembic>=1.13.0",
        "psutil>=5.9.0",
        "fastmcp>=0.9.0",
        "pytest>=7.4.0",
        "structlog>=23.0.0",
        "# Web framework and HTTP client",
        "websockets>=12.0",
        "# AI and ML capabilities",
        "paramiko>=3.4.0",
        "typer>=0.9.0",
        "asyncio",
        "threading",
        "# Core MCP requirements",
        "# Async and concurrency",
        "sqlite3",
        "# Security",
        "pytest-asyncio>=0.21.0",
        "jwt>=1.3.1",
        "torch>=2.0.0",
        "# Logging and monitoring",
        "pandas>=2.0.0",
        "queue",
        "aiohttp>=3.9.0",
        "concurrent.futures",
        "requests>=2.31.0",
        "# Configuration and serialization",
        "APScheduler>=3.10.0",
        "pytest-mock>=3.12.0",
        "flake8>=6.1.0",
        "invoke>=2.2.0",
        "# System monitoring and metrics",
        "redis>=5.0.0",
        "fabric>=3.2.0",
        "cryptography>=41.0.0",
        "black>=23.0.0",
        "mcp>=1.0.0",
        "python-dotenv>=1.0.0",
        "py-cpuinfo>=9.0.0",
        "celery>=5.3.0",
        "numpy>=1.24.0",
        "# Scheduling and task management",
        "prometheus-client>=0.19.0",
        "# Grok 3 MCP Server Requirements",
        "loguru>=0.7.0",
        "toml>=0.10.0",
        "# Utilities",
        "scikit-learn>=1.3.0",
        "# Database and data handling",
        "configparser",
        "rich>=13.7.0",
        "tensorflow>=2.13.0",
        "# Network and communication",
        "pyyaml>=6.0",
        "Any",
        "# Advanced coordination and agentic capabilities",
        "bcrypt>=4.1.0",
        "click>=8.1.0",
        "sqlalchemy>=2.0.0",
        "httpx>=0.26.0"
      ],
      "tools": [
        "_setup_tool",
        "call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\ai_integration\\grok3_mcp_server.py",
      "category": "ai_integration",
      "port": 3003,
      "dependencies": [
        "",
        "mypy>=1.8.0",
        "InitializationOptions",
        "alembic>=1.13.0",
        "the",
        "# Web framework and HTTP client",
        "websockets>=12.0",
        "paramiko>=3.4.0",
        "threading",
        "# Security",
        "torch>=2.0.0",
        "queue",
        "requests>=2.31.0",
        "# System monitoring and metrics",
        "mcp>=1.0.0",
        "psutil",
        "prometheus-client>=0.19.0",
        "# Scheduling and task management",
        "configparser",
        "FastMCP",
        "httpx>=0.26.0",
        "fastmcp>=0.9.0",
        "structlog>=23.0.0",
        "subprocess",
        "# AI and ML capabilities",
        "# Core MCP requirements",
        "datetime",
        "dataclass",
        "asynccontextmanager",
        "aiohttp>=3.9.0",
        "NotificationOptions",
        "# Utilities",
        "# Configuration and serialization",
        "python-dotenv>=1.0.0",
        "aiohttp",
        "signal",
        "Queue",
        "toml>=0.10.0",
        "scikit-learn>=1.3.0",
        "# Database and data handling",
        "dataclasses",
        "Any",
        "click>=8.1.0",
        "psutil>=5.9.0",
        "asyncio",
        "ThreadPoolExecutor",
        "websockets",
        "rich>=13.7.0",
        "APScheduler>=3.10.0",
        "Path",
        "cryptography>=41.0.0",
        "# Development and testing",
        "sqlalchemy>=2.0.0",
        "time",
        "pytest>=7.4.0",
        "typer>=0.9.0",
        "requests",
        "contextlib",
        "mcp",
        "concurrent",
        "# Async and concurrency",
        "sqlite3",
        "pytest-asyncio>=0.21.0",
        "jwt>=1.3.1",
        "# Logging and monitoring",
        "pandas>=2.0.0",
        "concurrent.futures",
        "flake8>=6.1.0",
        "pytest-mock>=3.12.0",
        "uuid",
        "invoke>=2.2.0",
        "redis>=5.0.0",
        "fabric>=3.2.0",
        "black>=23.0.0",
        "py-cpuinfo>=9.0.0",
        "overloaded",
        "celery>=5.3.0",
        "numpy>=1.24.0",
        "# Grok 3 MCP Server Requirements",
        "loguru>=0.7.0",
        "yaml",
        "tensorflow>=2.13.0",
        "# Network and communication",
        "pyyaml>=6.0",
        "# Advanced coordination and agentic capabilities",
        "bcrypt>=4.1.0",
        "traceback"
      ],
      "tools": [
        "_register_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "start-grok3",
      "file_path": "mcp_servers\\ai_integration\\start_grok3.py",
      "category": "ai_integration",
      "port": null,
      "dependencies": [
        "",
        "# Development and testing",
        "mypy>=1.8.0",
        "alembic>=1.13.0",
        "psutil>=5.9.0",
        "fastmcp>=0.9.0",
        "pytest>=7.4.0",
        "structlog>=23.0.0",
        "# Web framework and HTTP client",
        "websockets>=12.0",
        "# AI and ML capabilities",
        "paramiko>=3.4.0",
        "typer>=0.9.0",
        "grok3_mcp_server",
        "subprocess",
        "asyncio",
        "threading",
        "# Core MCP requirements",
        "Grok3MCPServer",
        "# Async and concurrency",
        "sqlite3",
        "# Security",
        "pytest-asyncio>=0.21.0",
        "jwt>=1.3.1",
        "torch>=2.0.0",
        "# Logging and monitoring",
        "pandas>=2.0.0",
        "queue",
        "Path",
        "aiohttp>=3.9.0",
        "concurrent.futures",
        "requests>=2.31.0",
        "# Configuration and serialization",
        "APScheduler>=3.10.0",
        "pytest-mock>=3.12.0",
        "flake8>=6.1.0",
        "invoke>=2.2.0",
        "# System monitoring and metrics",
        "redis>=5.0.0",
        "fabric>=3.2.0",
        "cryptography>=41.0.0",
        "black>=23.0.0",
        "mcp>=1.0.0",
        "python-dotenv>=1.0.0",
        "our",
        "py-cpuinfo>=9.0.0",
        "socket",
        "for",
        "warning",
        "celery>=5.3.0",
        "numpy>=1.24.0",
        "# Scheduling and task management",
        "prometheus-client>=0.19.0",
        "main",
        "# Grok 3 MCP Server Requirements",
        "loguru>=0.7.0",
        "toml>=0.10.0",
        "List",
        "# Utilities",
        "scikit-learn>=1.3.0",
        "# Database and data handling",
        "configparser",
        "rich>=13.7.0",
        "tensorflow>=2.13.0",
        "# Network and communication",
        "pyyaml>=6.0",
        "# Advanced coordination and agentic capabilities",
        "bcrypt>=4.1.0",
        "click>=8.1.0",
        "sqlalchemy>=2.0.0",
        "httpx>=0.26.0"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "WorkingCopilotMCPServer",
      "file_path": "mcp_servers\\ai_integration\\working_enhanced_copilot_mcp_server.py",
      "category": "ai_integration",
      "port": null,
      "dependencies": [
        "",
        "# Development and testing",
        "mypy>=1.8.0",
        "alembic>=1.13.0",
        "psutil>=5.9.0",
        "fastmcp>=0.9.0",
        "pytest>=7.4.0",
        "structlog>=23.0.0",
        "# Web framework and HTTP client",
        "websockets>=12.0",
        "# AI and ML capabilities",
        "paramiko>=3.4.0",
        "typer>=0.9.0",
        "asyncio",
        "threading",
        "# Core MCP requirements",
        "# Async and concurrency",
        "sqlite3",
        "# Security",
        "pytest-asyncio>=0.21.0",
        "jwt>=1.3.1",
        "torch>=2.0.0",
        "# Logging and monitoring",
        "pandas>=2.0.0",
        "queue",
        "aiohttp>=3.9.0",
        "concurrent.futures",
        "requests>=2.31.0",
        "# Configuration and serialization",
        "APScheduler>=3.10.0",
        "pytest-mock>=3.12.0",
        "flake8>=6.1.0",
        "invoke>=2.2.0",
        "# System monitoring and metrics",
        "redis>=5.0.0",
        "fabric>=3.2.0",
        "cryptography>=41.0.0",
        "black>=23.0.0",
        "mcp>=1.0.0",
        "python-dotenv>=1.0.0",
        "py-cpuinfo>=9.0.0",
        "celery>=5.3.0",
        "numpy>=1.24.0",
        "# Scheduling and task management",
        "prometheus-client>=0.19.0",
        "# Grok 3 MCP Server Requirements",
        "loguru>=0.7.0",
        "toml>=0.10.0",
        "# Utilities",
        "scikit-learn>=1.3.0",
        "# Database and data handling",
        "configparser",
        "rich>=13.7.0",
        "tensorflow>=2.13.0",
        "# Network and communication",
        "pyyaml>=6.0",
        "# Advanced coordination and agentic capabilities",
        "bcrypt>=4.1.0",
        "click>=8.1.0",
        "sqlalchemy>=2.0.0",
        "httpx>=0.26.0"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "context7-mcp-server",
      "file_path": "mcp_servers\\ai_integration\\context7-mcp-server\\context7_mcp_server.py",
      "category": "ai_integration",
      "port": 8004,
      "dependencies": [
        "defaultdict",
        "InitializationOptions",
        "datetime",
        "Flask",
        "stdio_server",
        "dataclass",
        "re",
        "dataclasses",
        "Tool",
        "NotificationOptions",
        "flask",
        "AnyUrl",
        "mcp",
        "collections",
        "aiohttp",
        "threading",
        "pydantic",
        "Dict"
      ],
      "tools": [
        "analyze_content_intelligence",
        "handle_list_tool",
        "get_relevant_context",
        "create_context_session",
        "get_context_analytics",
        "add_context_item",
        "handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "matic-mcp-server",
      "file_path": "mcp_servers\\blockchain_integration\\clean_matic_mcp_server.py",
      "category": "blockchain_integration",
      "port": null,
      "dependencies": [
        "datetime",
        "Any"
      ],
      "tools": [
        "_setup_tool",
        "call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "matic-mcp",
      "file_path": "mcp_servers\\blockchain_integration\\matic_mcp_server.py",
      "category": "blockchain_integration",
      "port": null,
      "dependencies": [
        "datetime",
        "Any"
      ],
      "tools": [
        "call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "WorkingFoundryMCPServer",
      "file_path": "mcp_servers\\blockchain_integration\\working_enhanced_foundry_mcp_server.py",
      "category": "blockchain_integration",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "working-flash-loan-mcp",
      "file_path": "mcp_servers\\blockchain_integration\\working_flash_loan_mcp.py",
      "category": "blockchain_integration",
      "port": null,
      "dependencies": [],
      "tools": [
        "handle_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "evm-mcp-server",
      "file_path": "mcp_servers\\blockchain_integration\\evm-mcp-server\\evm_mcp_server.py",
      "category": "blockchain_integration",
      "port": 8003,
      "dependencies": [],
      "tools": [
        "get_cross_chain_analysis",
        "decode_transaction",
        "handle_list_tool",
        "estimate_gas_costs",
        "simulate_transaction",
        "check_contract_verification",
        "get_evm_network_status",
        "handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "matic-mcp-server",
      "file_path": "mcp_servers\\blockchain_integration\\matic-mcp-server\\matic_mcp_server.py",
      "category": "blockchain_integration",
      "port": 8002,
      "dependencies": [],
      "tools": [
        "handle_list_tool",
        "get_polygon_network_status",
        "get_matic_price",
        "execute_polygon_transaction",
        "get_dex_liquidity",
        "get_polygon_gas_tracker",
        "handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCP Master Coordinator",
      "file_path": "mcp_servers\\coordination\\mcp_enhanced_coordinator.py",
      "category": "coordination",
      "port": 3000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "_query_mcp_server",
      "file_path": "mcp_servers\\coordination\\mcp_integration_bridge.py",
      "category": "coordination",
      "port": 8007,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCP Master Coordinator",
      "file_path": "mcp_servers\\coordination\\mcp_server_coordinator.py",
      "category": "coordination",
      "port": 3000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\coordination\\unified_mcp_coordinator.py",
      "category": "coordination",
      "port": null,
      "dependencies": [
        "dotenv",
        "all",
        "subprocess",
        "datetime",
        "dataclass",
        "a",
        "profit",
        "Path",
        "aiohttp",
        "our",
        "socket",
        "load_dotenv",
        "Dict",
        "signal",
        "platform",
        "Flask",
        "flask_cors",
        "Decimal",
        "FrameType",
        "flask",
        "CORS",
        "symbol",
        "dataclasses",
        "decimal",
        "types"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "DEXPriceMCPServer",
      "file_path": "mcp_servers\\data_providers\\dex_price_mcp_server.py",
      "category": "data_providers",
      "port": null,
      "dependencies": [
        "datetime",
        "flask_cors",
        "Flask",
        "time",
        "flask",
        "dex_price_monitor",
        "price_monitor",
        "TypedDict",
        "CORS",
        "JSON",
        "threading"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "price-oracle-mcp-server",
      "file_path": "mcp_servers\\data_providers\\price-oracle-mcp-server\\price_oracle_mcp_server.py",
      "category": "data_providers",
      "port": 8005,
      "dependencies": [],
      "tools": [
        "create_price_alert",
        "get_market_analysis",
        "get_oracle_health",
        "handle_list_tool",
        "get_price_history",
        "get_aggregated_price",
        "handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "DEXPriceMCPServer",
      "file_path": "mcp_servers\\dex_services\\dex_price_mcp_server.py",
      "category": "dex_services",
      "port": null,
      "dependencies": [
        "datetime",
        "flask_cors",
        "Flask",
        "time",
        "flask",
        "dex_price_monitor",
        "price_monitor",
        "TypedDict",
        "CORS",
        "JSON",
        "threading"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "EVMMCPServer",
      "file_path": "mcp_servers\\evm-mcp-server\\evm_mcp_server.py",
      "category": "evm-mcp-server",
      "port": null,
      "dependencies": [
        "DEXs",
        "web",
        "time",
        "aiohttp",
        "file",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPContractExecutorServer",
      "file_path": "mcp_servers\\execution\\mcp_contract_executor_server.py",
      "category": "execution",
      "port": 3005,
      "dependencies": [
        "datetime",
        "web",
        "time",
        "Web3",
        "eth_account",
        "Account",
        "strategy",
        "Dict",
        "aiohttp",
        "network",
        "web3"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPFlashLoanStrategistServer",
      "file_path": "mcp_servers\\execution\\mcp_flash_loan_strategist_server.py",
      "category": "execution",
      "port": 3004,
      "dependencies": [
        "datetime",
        "web",
        "numpy",
        "aiohttp",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPTransactionOptimizerServer",
      "file_path": "mcp_servers\\execution\\mcp_transaction_optimizer_server.py",
      "category": "execution",
      "port": 3006,
      "dependencies": [
        "datetime",
        "web",
        "optimization",
        "numpy",
        "success",
        "aiohttp",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "WorkingUnifiedFlashLoanMCPServer",
      "file_path": "mcp_servers\\execution\\working_unified_flash_loan_mcp_server.py",
      "category": "execution",
      "port": null,
      "dependencies": [],
      "tools": [
        "check_foundry_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "WorkingFoundryMCPServer",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\working_enhanced_foundry_mcp_server.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "",
        "dataclasses-json>=0.5.7",
        "send2trash>=1.8.0",
        "psutil>=5.9.0",
        "structlog>=23.0.0",
        "black>=22.3.0",
        "typing-extensions>=4.0.0",
        "pytest-asyncio>=0.20.0",
        "pydantic>=2.0.0",
        "slither-analyzer>=0.9.0",
        "fastapi>=0.100.0",
        "prometheus-client>=0.16.0",
        "# Integration with existing system",
        "eth-account>=0.10.0",
        "safety>=2.3.5",
        "# MCP package for Model Context Protocol support",
        "# Logging and monitoring",
        "# Core Dependencies",
        "tenacity>=8.0.0",
        "pytest-cov>=3.0.0",
        "websockets>=11.0",
        "pytest>=7.0.0",
        "# File management and utilities",
        "python-dotenv>=1.0.0",
        "bandit>=1.7.5",
        "mcp>=1.0.0",
        "# Data handling and validation",
        "jsonschema>=4.0.0",
        "asyncio-mqtt>=0.11.0",
        "web3>=7.0.0",
        "aiohttp>=3.8.0",
        "pathlib>=1.0.1",
        "mcp-server>=0.1.4",
        "requests>=2.26.0",
        "# Configuration management",
        "pyyaml>=6.0.1",
        "# Security tools integration",
        "uvicorn[standard]>=0.20.0",
        "# Async utilities",
        "flake8>=4.0.1",
        "toml>=0.10.2",
        "# Development and testing",
        "watchdog>=3.0.0"
      ],
      "tools": [],
      "working": true,
      "docker_ready": true
    },
    {
      "name": "revenue-optimizer",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\integration\\revenue_optimizer.py",
      "category": "foundry_integration",
      "port": 8001,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "--init--",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\__init__.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "FoundryMCPServer",
        "ConfigLoader",
        "setup_logger"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "--main--",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\__main__.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "main",
        "server",
        "Path"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "event-system",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\bridge\\event_system.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "defaultdict",
        "AsyncQueue",
        "queue",
        "Any",
        "an",
        "collections",
        "callback"
      ],
      "tools": [
        "publish_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "connection-manager",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\connection_manager.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "AsyncLock",
        "registry",
        "Any",
        "Path"
      ],
      "tools": [
        "_handle_list_tool",
        "_handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "error-handler",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\error_handler.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "time",
        "enum",
        "Any",
        "Enum",
        "traceback"
      ],
      "tools": [
        "_handle_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "tool-registry",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\tool_registry.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [],
      "tools": [
        "create_tool",
        "list_tool",
        "execute_tool",
        "get_tool",
        "_initialize_single_tool",
        "deactivate_tool",
        "_initialize_tool",
        "activate_tool",
        "_handle_tool",
        "register_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "--init--",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\server\\__init__.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "FoundryMCPServer",
        "ConnectionManager",
        "ToolRegistry",
        "ErrorHandler"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "--init--",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\tools\\__init__.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "async-utils",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\async_utils.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "the",
        "functools",
        "queue",
        "Any"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "config-loader",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\config_loader.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "e",
        "yaml",
        "BaseModel",
        "re",
        "Any",
        "Path",
        "file",
        "pydantic",
        "toml"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "logger",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\logger.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "Optional",
        "Path"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "--init--",
      "file_path": "mcp_servers\\foundry_integration\\foundry-mcp-server\\src\\utils\\__init__.py",
      "category": "foundry_integration",
      "port": null,
      "dependencies": [
        "run_with_timeout",
        "setup_logger",
        "ConfigLoader"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "risk-management-mcp-server",
      "file_path": "mcp_servers\\legacy\\risk_management_variations\\risk_management_mcp_server.py",
      "category": "legacy",
      "port": null,
      "dependencies": [],
      "tools": [
        "calculate_position_risk",
        "get_risk_dashboard",
        "handle_list_tool",
        "calculate_portfolio_risk",
        "create_risk_alert",
        "simulate_position_change",
        "handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "RiskManagementMCPServer",
      "file_path": "mcp_servers\\legacy\\risk_management_variations\\risk_management_mcp_server_clean.py",
      "category": "legacy",
      "port": null,
      "dependencies": [
        "math",
        "defaultdict",
        "datetime",
        "Decimal",
        "dataclass",
        "dataclasses",
        "decimal",
        "enum",
        "Enum",
        "collections",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "RiskManagementMCPServer",
      "file_path": "mcp_servers\\legacy\\risk_management_variations\\risk_management_mcp_server_fixed.py",
      "category": "legacy",
      "port": null,
      "dependencies": [
        "math",
        "defaultdict",
        "datetime",
        "Decimal",
        "dataclass",
        "price",
        "dataclasses",
        "decimal",
        "enum",
        "Enum",
        "collections",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPLiquidityMonitorServer",
      "file_path": "mcp_servers\\market_analysis\\mcp_liquidity_monitor_server.py",
      "category": "market_analysis",
      "port": null,
      "dependencies": [
        "address",
        "datetime",
        "web",
        "dataclass",
        "all",
        "dataclasses",
        "aiohttp",
        "mcp",
        "FastMCP",
        "aioredis",
        "Dict"
      ],
      "tools": [
        "_register_tool"
      ],
      "working": false,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\market_analysis\\mcp_shared_utilities.py",
      "category": "market_analysis",
      "port": 6379,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPTokenScannerServer",
      "file_path": "mcp_servers\\market_analysis\\mcp_token_scanner_server.py",
      "category": "market_analysis",
      "port": 3001,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MaticMCPServer",
      "file_path": "mcp_servers\\matic-mcp-server\\matic_mcp_server.py",
      "category": "matic-mcp-server",
      "port": null,
      "dependencies": [
        "web",
        "time",
        "aiohttp",
        "file",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "check-mcp-status",
      "file_path": "mcp_servers\\monitoring\\check-mcp-status.py",
      "category": "monitoring",
      "port": 8007,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "check-mcp-status",
      "file_path": "mcp_servers\\monitoring\\check_mcp_status.py",
      "category": "monitoring",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "mcp-stability-report",
      "file_path": "mcp_servers\\monitoring\\mcp-stability-report.py",
      "category": "monitoring",
      "port": 8007,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "TaskManager-MCP",
      "file_path": "mcp_servers\\monitoring\\mcp_server_checker.py",
      "category": "monitoring",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "mcp-status-demo",
      "file_path": "mcp_servers\\monitoring\\mcp_status_demo.py",
      "category": "monitoring",
      "port": 8007,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "check_mcp_server",
      "file_path": "mcp_servers\\monitoring\\quick_mcp_check.py",
      "category": "monitoring",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "verify-mcp-organization",
      "file_path": "mcp_servers\\monitoring\\verify_mcp_organization.py",
      "category": "monitoring",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "test_mcp_server",
      "file_path": "mcp_servers\\monitoring\\verify_mcp_servers.py",
      "category": "monitoring",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "verify-mcp-status",
      "file_path": "mcp_servers\\monitoring\\verify_mcp_status.py",
      "category": "monitoring",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "Foundry MCP Server",
      "file_path": "mcp_servers\\orchestration\\create_final_unified_mcp_manager.py",
      "category": "orchestration",
      "port": 8001,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "viewport",
      "file_path": "mcp_servers\\orchestration\\enhanced_production_mcp_server_v2.py",
      "category": "orchestration",
      "port": 8000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCP Master Coordinator",
      "file_path": "mcp_servers\\orchestration\\mcp_enhanced_coordinator.py",
      "category": "orchestration",
      "port": 3000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPMasterCoordinatorServer",
      "file_path": "mcp_servers\\orchestration\\mcp_master_coordinator_server.py",
      "category": "orchestration",
      "port": 3000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCP Master Coordinator",
      "file_path": "mcp_servers\\orchestration\\mcp_server_coordinator_backup.py",
      "category": "orchestration",
      "port": 3000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCP Master Coordinator",
      "file_path": "mcp_servers\\orchestration\\mcp_server_coordinator_fixed.py",
      "category": "orchestration",
      "port": 3000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCP Master Coordinator",
      "file_path": "mcp_servers\\orchestration\\mcp_unified_config.py",
      "category": "orchestration",
      "port": 3000,
      "dependencies": [
        "datetime",
        "dataclass",
        "dataclasses",
        "JSON",
        "Path",
        "Dict",
        "dictionary",
        "environment"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "Task Manager MCP",
      "file_path": "mcp_servers\\orchestration\\simplified_mcp_coordinator_backup.py",
      "category": "orchestration",
      "port": 8009,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "Task Manager MCP",
      "file_path": "mcp_servers\\orchestration\\simplified_mcp_coordinator_fixed.py",
      "category": "orchestration",
      "port": 8009,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\orchestration\\unified_mcp_coordinator.py",
      "category": "orchestration",
      "port": null,
      "dependencies": [
        "dotenv",
        "all",
        "subprocess",
        "datetime",
        "dataclass",
        "a",
        "profit",
        "Path",
        "aiohttp",
        "our",
        "socket",
        "load_dotenv",
        "Dict",
        "signal",
        "platform",
        "Flask",
        "flask_cors",
        "Decimal",
        "FrameType",
        "flask",
        "CORS",
        "symbol",
        "dataclasses",
        "decimal",
        "types"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "taskmanager",
      "file_path": "mcp_servers\\orchestration\\unified_mcp_integration_manager.py",
      "category": "orchestration",
      "port": 8001,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "viewport",
      "file_path": "mcp_servers\\production\\enhanced_production_mcp_server_v2.py",
      "category": "production",
      "port": 8000,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "code-quality-checker-agent",
      "file_path": "mcp_servers\\quality\\code_quality_checker_agent.py",
      "category": "quality",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "recovery-agent",
      "file_path": "mcp_servers\\recovery\\recovery_agent.py",
      "category": "recovery",
      "port": 8080,
      "dependencies": [
        "datetime",
        "dataclass",
        "BaseModel",
        "CORSMiddleware",
        "dataclasses",
        "asynccontextmanager",
        "pydantic",
        "fastapi",
        "contextlib",
        "Dict",
        "uvicorn",
        "FastAPI",
        "psutil"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "create_log_entry",
      "file_path": "mcp_servers\\risk_management\\mcp_logger_auditor_server.py",
      "category": "risk_management",
      "port": null,
      "dependencies": [
        "import",
        "traceback",
        "datetime",
        "csv",
        "Server",
        "time",
        "dataclass",
        "stdio_server",
        "dataclasses",
        "Tool",
        "Any",
        "mcp",
        "Path",
        "aioredis",
        "psutil"
      ],
      "tools": [
        "list_tool",
        "generate_report",
        "get_system_health",
        "search_logs",
        "call_tool",
        "get_performance_metrics",
        "get_audit_trail",
        "create_log_entry",
        "export_logs"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPRiskManagerServer",
      "file_path": "mcp_servers\\risk_management\\mcp_risk_manager_server.py",
      "category": "risk_management",
      "port": 3007,
      "dependencies": [
        "math",
        "datetime",
        "web",
        "dataclass",
        "dataclasses",
        "numpy",
        "aiohttp",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "risk-management-mcp-server",
      "file_path": "mcp_servers\\risk_management\\risk-management-mcp-server\\risk_management_mcp_server.py",
      "category": "risk_management",
      "port": null,
      "dependencies": [],
      "tools": [
        "calculate_position_risk",
        "get_risk_dashboard",
        "handle_list_tool",
        "calculate_portfolio_risk",
        "create_risk_alert",
        "simulate_position_change",
        "handle_call_tool"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "RiskManagementMCPServer",
      "file_path": "mcp_servers\\risk_management\\risk-management-mcp-server\\risk_management_mcp_server_clean.py",
      "category": "risk_management",
      "port": null,
      "dependencies": [
        "math",
        "defaultdict",
        "datetime",
        "Decimal",
        "dataclass",
        "dataclasses",
        "decimal",
        "enum",
        "Enum",
        "collections",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "RiskManagementMCPServer",
      "file_path": "mcp_servers\\risk_management\\risk-management-mcp-server\\risk_management_mcp_server_fixed.py",
      "category": "risk_management",
      "port": null,
      "dependencies": [
        "math",
        "defaultdict",
        "datetime",
        "Decimal",
        "dataclass",
        "price",
        "dataclasses",
        "decimal",
        "enum",
        "Enum",
        "collections",
        "Dict"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "mcp-simple-startup",
      "file_path": "mcp_servers\\scripts\\mcp_simple_startup.py",
      "category": "scripts",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\scripts\\organize_mcp_servers.py",
      "category": "scripts",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\scripts\\start-stable-mcp-servers.py",
      "category": "scripts",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "viewport",
      "file_path": "mcp_servers\\ui\\enhanced_mcp_dashboard_with_chat.py",
      "category": "ui",
      "port": 8004,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "Master Coordinator",
      "file_path": "mcp_servers\\ui\\mcp_dashboard_server.py",
      "category": "ui",
      "port": 8001,
      "dependencies": [],
      "tools": [
        "list_tool",
        "call_tool",
        "manage_alert_rules",
        "get_api_gateway_stats",
        "send_system_command",
        "get_dashboard_status",
        "proxy_mcp_request"
      ],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\unified_mcp_coordinator.py\\unified_mcp_coordinator.py",
      "category": "unified_mcp_coordinator.py",
      "port": null,
      "dependencies": [
        "dotenv",
        "all",
        "subprocess",
        "datetime",
        "dataclass",
        "a",
        "profit",
        "Path",
        "aiohttp",
        "our",
        "socket",
        "load_dotenv",
        "Dict",
        "signal",
        "platform",
        "Flask",
        "flask_cors",
        "Decimal",
        "FrameType",
        "flask",
        "CORS",
        "symbol",
        "dataclasses",
        "decimal",
        "types"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\utilities\\mcp_shared_utilities.py",
      "category": "utilities",
      "port": 6379,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "TaskManager-MCP",
      "file_path": "mcp_servers\\utils\\mcp_server_checker.py",
      "category": "utils",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\utils\\mcp_server_template.py",
      "category": "utils",
      "port": null,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\utils\\mcp_shared_utilities.py",
      "category": "utils",
      "port": 6379,
      "dependencies": [],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "start-alls",
      "file_path": "mcp_servers\\utils\\start_all_mcp_servers.py",
      "category": "utils",
      "port": null,
      "dependencies": [
        "PRODUCTION_LAUNCHER",
        "path",
        "ProductionLauncher",
        "Path"
      ],
      "tools": [],
      "working": true,
      "docker_ready": false
    },
    {
      "name": "MCPServer",
      "file_path": "mcp_servers\\utils\\working_mcp_server_template.py",
      "category": "utils",
      "port": null,
      "dependencies": [
        "Any"
      ],
      "tools": [
        "call_tool",
        "echo",
        "add_tool"
      ],
      "working": true,
      "docker_ready": false
    }
  ],
  "total_tools": 60,
  "unique_tools": [
    "list_tool",
    "echo",
    "get_market_analysis",
    "get_oracle_health",
    "generate_report",
    "_setup_tool",
    "decode_transaction",
    "handle_list_tool",
    "get_polygon_network_status",
    "get_matic_price",
    "get_context_analytics",
    "execute_polygon_transaction",
    "export_logs",
    "proxy_mcp_request",
    "create_price_alert",
    "analyze_content_intelligence",
    "calculate_position_risk",
    "activate_tool",
    "get_api_gateway_stats",
    "create_risk_alert",
    "_handle_list_tool",
    "get_evm_network_status",
    "get_aggregated_price",
    "get_dashboard_status",
    "get_polygon_gas_tracker",
    "register_tool",
    "check_foundry_tool",
    "get_tool",
    "estimate_gas_costs",
    "call_tool",
    "get_performance_metrics",
    "calculate_portfolio_risk",
    "get_audit_trail",
    "create_log_entry",
    "check_contract_verification",
    "get_dex_liquidity",
    "handle_call_tool",
    "handle_tool",
    "get_cross_chain_analysis",
    "publish_tool",
    "create_tool",
    "execute_tool",
    "_initialize_single_tool",
    "deactivate_tool",
    "_register_tool",
    "get_risk_dashboard",
    "get_system_health",
    "search_logs",
    "_handle_call_tool",
    "_initialize_tool",
    "get_price_history",
    "manage_alert_rules",
    "simulate_transaction",
    "_handle_tool",
    "send_system_command",
    "get_relevant_context",
    "create_context_session",
    "add_tool",
    "simulate_position_change",
    "add_context_item"
  ],
  "docker_ready_count": 1
}