[
  {
    "name": "context7-mcp-server",
    "file_path": "mcp_servers\\ai_integration\\clean_context7_mcp_server.py",
    "category": "ai_integration",
    "port": null,
    "dependencies": [
      "",
      "# Development and testing",
      "mypy>=1.8.0",
      "alembic>=1.13.0",
      "psutil>=5.9.0",
      "fastmcp>=0.9.0",
      "pytest>=7.4.0",
      "structlog>=23.0.0",
      "# Web framework and HTTP client",
      "websockets>=12.0",
      "# AI and ML capabilities",
      "paramiko>=3.4.0",
      "typer>=0.9.0",
      "asyncio",
      "threading",
      "# Core MCP requirements",
      "# Async and concurrency",
      "sqlite3",
      "# Security",
      "pytest-asyncio>=0.21.0",
      "jwt>=1.3.1",
      "torch>=2.0.0",
      "# Logging and monitoring",
      "pandas>=2.0.0",
      "queue",
      "aiohttp>=3.9.0",
      "concurrent.futures",
      "requests>=2.31.0",
      "# Configuration and serialization",
      "APScheduler>=3.10.0",
      "pytest-mock>=3.12.0",
      "flake8>=6.1.0",
      "invoke>=2.2.0",
      "# System monitoring and metrics",
      "redis>=5.0.0",
      "fabric>=3.2.0",
      "cryptography>=41.0.0",
      "black>=23.0.0",
      "mcp>=1.0.0",
      "python-dotenv>=1.0.0",
      "py-cpuinfo>=9.0.0",
      "celery>=5.3.0",
      "numpy>=1.24.0",
      "# Scheduling and task management",
      "prometheus-client>=0.19.0",
      "# Grok 3 MCP Server Requirements",
      "loguru>=0.7.0",
      "toml>=0.10.0",
      "# Utilities",
      "scikit-learn>=1.3.0",
      "# Database and data handling",
      "configparser",
      "rich>=13.7.0",
      "tensorflow>=2.13.0",
      "# Network and communication",
      "pyyaml>=6.0",
      "Any",
      "# Advanced coordination and agentic capabilities",
      "bcrypt>=4.1.0",
      "click>=8.1.0",
      "sqlalchemy>=2.0.0",
      "httpx>=0.26.0"
    ],
    "tools": [
      "_setup_tool",
      "call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "MCPServer",
    "file_path": "mcp_servers\\ai_integration\\grok3_mcp_server.py",
    "category": "ai_integration",
    "port": 3003,
    "dependencies": [
      "",
      "mypy>=1.8.0",
      "InitializationOptions",
      "alembic>=1.13.0",
      "the",
      "# Web framework and HTTP client",
      "websockets>=12.0",
      "paramiko>=3.4.0",
      "threading",
      "# Security",
      "torch>=2.0.0",
      "queue",
      "requests>=2.31.0",
      "# System monitoring and metrics",
      "mcp>=1.0.0",
      "psutil",
      "prometheus-client>=0.19.0",
      "# Scheduling and task management",
      "configparser",
      "FastMCP",
      "httpx>=0.26.0",
      "fastmcp>=0.9.0",
      "structlog>=23.0.0",
      "subprocess",
      "# AI and ML capabilities",
      "# Core MCP requirements",
      "datetime",
      "dataclass",
      "asynccontextmanager",
      "aiohttp>=3.9.0",
      "NotificationOptions",
      "# Utilities",
      "# Configuration and serialization",
      "python-dotenv>=1.0.0",
      "aiohttp",
      "signal",
      "Queue",
      "toml>=0.10.0",
      "scikit-learn>=1.3.0",
      "# Database and data handling",
      "dataclasses",
      "Any",
      "click>=8.1.0",
      "psutil>=5.9.0",
      "asyncio",
      "ThreadPoolExecutor",
      "websockets",
      "rich>=13.7.0",
      "APScheduler>=3.10.0",
      "Path",
      "cryptography>=41.0.0",
      "# Development and testing",
      "sqlalchemy>=2.0.0",
      "time",
      "pytest>=7.4.0",
      "typer>=0.9.0",
      "requests",
      "contextlib",
      "mcp",
      "concurrent",
      "# Async and concurrency",
      "sqlite3",
      "pytest-asyncio>=0.21.0",
      "jwt>=1.3.1",
      "# Logging and monitoring",
      "pandas>=2.0.0",
      "concurrent.futures",
      "flake8>=6.1.0",
      "pytest-mock>=3.12.0",
      "uuid",
      "invoke>=2.2.0",
      "redis>=5.0.0",
      "fabric>=3.2.0",
      "black>=23.0.0",
      "py-cpuinfo>=9.0.0",
      "overloaded",
      "celery>=5.3.0",
      "numpy>=1.24.0",
      "# Grok 3 MCP Server Requirements",
      "loguru>=0.7.0",
      "yaml",
      "tensorflow>=2.13.0",
      "# Network and communication",
      "pyyaml>=6.0",
      "# Advanced coordination and agentic capabilities",
      "bcrypt>=4.1.0",
      "traceback"
    ],
    "tools": [
      "_register_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "start-grok3",
    "file_path": "mcp_servers\\ai_integration\\start_grok3.py",
    "category": "ai_integration",
    "port": null,
    "dependencies": [
      "",
      "# Development and testing",
      "mypy>=1.8.0",
      "alembic>=1.13.0",
      "psutil>=5.9.0",
      "fastmcp>=0.9.0",
      "pytest>=7.4.0",
      "structlog>=23.0.0",
      "# Web framework and HTTP client",
      "websockets>=12.0",
      "# AI and ML capabilities",
      "paramiko>=3.4.0",
      "typer>=0.9.0",
      "grok3_mcp_server",
      "subprocess",
      "asyncio",
      "threading",
      "# Core MCP requirements",
      "Grok3MCPServer",
      "# Async and concurrency",
      "sqlite3",
      "# Security",
      "pytest-asyncio>=0.21.0",
      "jwt>=1.3.1",
      "torch>=2.0.0",
      "# Logging and monitoring",
      "pandas>=2.0.0",
      "queue",
      "Path",
      "aiohttp>=3.9.0",
      "concurrent.futures",
      "requests>=2.31.0",
      "# Configuration and serialization",
      "APScheduler>=3.10.0",
      "pytest-mock>=3.12.0",
      "flake8>=6.1.0",
      "invoke>=2.2.0",
      "# System monitoring and metrics",
      "redis>=5.0.0",
      "fabric>=3.2.0",
      "cryptography>=41.0.0",
      "black>=23.0.0",
      "mcp>=1.0.0",
      "python-dotenv>=1.0.0",
      "our",
      "py-cpuinfo>=9.0.0",
      "socket",
      "for",
      "warning",
      "celery>=5.3.0",
      "numpy>=1.24.0",
      "# Scheduling and task management",
      "prometheus-client>=0.19.0",
      "main",
      "# Grok 3 MCP Server Requirements",
      "loguru>=0.7.0",
      "toml>=0.10.0",
      "List",
      "# Utilities",
      "scikit-learn>=1.3.0",
      "# Database and data handling",
      "configparser",
      "rich>=13.7.0",
      "tensorflow>=2.13.0",
      "# Network and communication",
      "pyyaml>=6.0",
      "# Advanced coordination and agentic capabilities",
      "bcrypt>=4.1.0",
      "click>=8.1.0",
      "sqlalchemy>=2.0.0",
      "httpx>=0.26.0"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "WorkingCopilotMCPServer",
    "file_path": "mcp_servers\\ai_integration\\working_enhanced_copilot_mcp_server.py",
    "category": "ai_integration",
    "port": null,
    "dependencies": [
      "",
      "# Development and testing",
      "mypy>=1.8.0",
      "alembic>=1.13.0",
      "psutil>=5.9.0",
      "fastmcp>=0.9.0",
      "pytest>=7.4.0",
      "structlog>=23.0.0",
      "# Web framework and HTTP client",
      "websockets>=12.0",
      "# AI and ML capabilities",
      "paramiko>=3.4.0",
      "typer>=0.9.0",
      "asyncio",
      "threading",
      "# Core MCP requirements",
      "# Async and concurrency",
      "sqlite3",
      "# Security",
      "pytest-asyncio>=0.21.0",
      "jwt>=1.3.1",
      "torch>=2.0.0",
      "# Logging and monitoring",
      "pandas>=2.0.0",
      "queue",
      "aiohttp>=3.9.0",
      "concurrent.futures",
      "requests>=2.31.0",
      "# Configuration and serialization",
      "APScheduler>=3.10.0",
      "pytest-mock>=3.12.0",
      "flake8>=6.1.0",
      "invoke>=2.2.0",
      "# System monitoring and metrics",
      "redis>=5.0.0",
      "fabric>=3.2.0",
      "cryptography>=41.0.0",
      "black>=23.0.0",
      "mcp>=1.0.0",
      "python-dotenv>=1.0.0",
      "py-cpuinfo>=9.0.0",
      "celery>=5.3.0",
      "numpy>=1.24.0",
      "# Scheduling and task management",
      "prometheus-client>=0.19.0",
      "# Grok 3 MCP Server Requirements",
      "loguru>=0.7.0",
      "toml>=0.10.0",
      "# Utilities",
      "scikit-learn>=1.3.0",
      "# Database and data handling",
      "configparser",
      "rich>=13.7.0",
      "tensorflow>=2.13.0",
      "# Network and communication",
      "pyyaml>=6.0",
      "# Advanced coordination and agentic capabilities",
      "bcrypt>=4.1.0",
      "click>=8.1.0",
      "sqlalchemy>=2.0.0",
      "httpx>=0.26.0"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "context7-mcp-server",
    "file_path": "mcp_servers\\ai_integration\\context7-mcp-server\\context7_mcp_server.py",
    "category": "ai_integration",
    "port": 8004,
    "dependencies": [
      "defaultdict",
      "InitializationOptions",
      "datetime",
      "Flask",
      "stdio_server",
      "dataclass",
      "re",
      "dataclasses",
      "Tool",
      "NotificationOptions",
      "flask",
      "AnyUrl",
      "mcp",
      "collections",
      "aiohttp",
      "threading",
      "pydantic",
      "Dict"
    ],
    "tools": [
      "analyze_content_intelligence",
      "handle_list_tool",
      "get_relevant_context",
      "create_context_session",
      "get_context_analytics",
      "add_context_item",
      "handle_call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "matic-mcp-server",
    "file_path": "mcp_servers\\blockchain_integration\\clean_matic_mcp_server.py",
    "category": "blockchain_integration",
    "port": null,
    "dependencies": [
      "datetime",
      "Any"
    ],
    "tools": [
      "_setup_tool",
      "call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "matic-mcp",
    "file_path": "mcp_servers\\blockchain_integration\\matic_mcp_server.py",
    "category": "blockchain_integration",
    "port": null,
    "dependencies": [
      "datetime",
      "Any"
    ],
    "tools": [
      "call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "WorkingFoundryMCPServer",
    "file_path": "mcp_servers\\blockchain_integration\\working_enhanced_foundry_mcp_server.py",
    "category": "blockchain_integration",
    "port": null,
    "dependencies": [],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "working-flash-loan-mcp",
    "file_path": "mcp_servers\\blockchain_integration\\working_flash_loan_mcp.py",
    "category": "blockchain_integration",
    "port": null,
    "dependencies": [],
    "tools": [
      "handle_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "evm-mcp-server",
    "file_path": "mcp_servers\\blockchain_integration\\evm-mcp-server\\evm_mcp_server.py",
    "category": "blockchain_integration",
    "port": 8003,
    "dependencies": [],
    "tools": [
      "get_cross_chain_analysis",
      "decode_transaction",
      "handle_list_tool",
      "estimate_gas_costs",
      "simulate_transaction",
      "check_contract_verification",
      "get_evm_network_status",
      "handle_call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "matic-mcp-server",
    "file_path": "mcp_servers\\blockchain_integration\\matic-mcp-server\\matic_mcp_server.py",
    "category": "blockchain_integration",
    "port": 8002,
    "dependencies": [],
    "tools": [
      "handle_list_tool",
      "get_polygon_network_status",
      "get_matic_price",
      "execute_polygon_transaction",
      "get_dex_liquidity",
      "get_polygon_gas_tracker",
      "handle_call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "MCP Master Coordinator",
    "file_path": "mcp_servers\\coordination\\mcp_enhanced_coordinator.py",
    "category": "coordination",
    "port": 3000,
    "dependencies": [],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "_query_mcp_server",
    "file_path": "mcp_servers\\coordination\\mcp_integration_bridge.py",
    "category": "coordination",
    "port": 8007,
    "dependencies": [],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "MCP Master Coordinator",
    "file_path": "mcp_servers\\coordination\\mcp_server_coordinator.py",
    "category": "coordination",
    "port": 3000,
    "dependencies": [],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "MCPServer",
    "file_path": "mcp_servers\\coordination\\unified_mcp_coordinator.py",
    "category": "coordination",
    "port": null,
    "dependencies": [
      "dotenv",
      "all",
      "subprocess",
      "datetime",
      "dataclass",
      "a",
      "profit",
      "Path",
      "aiohttp",
      "our",
      "socket",
      "load_dotenv",
      "Dict",
      "signal",
      "platform",
      "Flask",
      "flask_cors",
      "Decimal",
      "FrameType",
      "flask",
      "CORS",
      "symbol",
      "dataclasses",
      "decimal",
      "types"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "DEXPriceMCPServer",
    "file_path": "mcp_servers\\data_providers\\dex_price_mcp_server.py",
    "category": "data_providers",
    "port": null,
    "dependencies": [
      "datetime",
      "flask_cors",
      "Flask",
      "time",
      "flask",
      "dex_price_monitor",
      "price_monitor",
      "TypedDict",
      "CORS",
      "JSON",
      "threading"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "price-oracle-mcp-server",
    "file_path": "mcp_servers\\data_providers\\price-oracle-mcp-server\\price_oracle_mcp_server.py",
    "category": "data_providers",
    "port": 8005,
    "dependencies": [],
    "tools": [
      "create_price_alert",
      "get_market_analysis",
      "get_oracle_health",
      "handle_list_tool",
      "get_price_history",
      "get_aggregated_price",
      "handle_call_tool"
    ],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "DEXPriceMCPServer",
    "file_path": "mcp_servers\\dex_services\\dex_price_mcp_server.py",
    "category": "dex_services",
    "port": null,
    "dependencies": [
      "datetime",
      "flask_cors",
      "Flask",
      "time",
      "flask",
      "dex_price_monitor",
      "price_monitor",
      "TypedDict",
      "CORS",
      "JSON",
      "threading"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "EVMMCPServer",
    "file_path": "mcp_servers\\evm-mcp-server\\evm_mcp_server.py",
    "category": "evm-mcp-server",
    "port": null,
    "dependencies": [
      "DEXs",
      "web",
      "time",
      "aiohttp",
      "file",
      "Dict"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "MCPContractExecutorServer",
    "file_path": "mcp_servers\\execution\\mcp_contract_executor_server.py",
    "category": "execution",
    "port": 3005,
    "dependencies": [
      "datetime",
      "web",
      "time",
      "Web3",
      "eth_account",
      "Account",
      "strategy",
      "Dict",
      "aiohttp",
      "network",
      "web3"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  },
  {
    "name": "MCPFlashLoanStrategistServer",
    "file_path": "mcp_servers\\execution\\mcp_flash_loan_strategist_server.py",
    "category": "execution",
    "port": 3004,
    "dependencies": [
      "datetime",
      "web",
      "numpy",
      "aiohttp",
      "Dict"
    ],
    "tools": [],
    "working": true,
    "docker_ready": false
  }
]