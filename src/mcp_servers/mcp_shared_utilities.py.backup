#!/usr/bin/env python3
"""
MCP Shared Utilities
==================

Common utilities and patterns shared across all MCP servers.
Following COPILOT_AGENT_RULES.md - leveraging existing code patterns and consolidating common functionality.
"""

import json
import logging
import sys
import time
import traceback
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Callable # Removed Union
# Removed pathlib Path import as it was unused
import aiohttp
from aiohttp import web # Import web directly
import psutil
from contextlib import asynccontextmanager
# asyncio was removed as it was unused

# Handle aioredis import with fallback
_REDIS_AVAILABLE_DEFAULT = False
try:
    import aioredis
    REDIS_AVAILABLE = True
except (ImportError, TypeError) as e:
    print(f"Warning: aioredis not available or incompatible: {e}")
    aioredis = None
    REDIS_AVAILABLE = _REDIS_AVAILABLE_DEFAULT  # Use the default

# Configure standardized logging across all MCP servers
def setup_mcp_logging(server_name: str, log_file: Optional[str] = None) -> logging.Logger:
    """Setup standardized logging for MCP servers"""
    log_file = log_file or f"mcp_{server_name.lower().replace(' ', '_')}.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(server_name)

@dataclass
class MCPServerBase:
    """Base configuration and patterns for all MCP servers"""
    name: str
    port: int
    version: str = "1.0.0"
    startup_time: Optional[datetime] = None
    health_status: str = "starting"
    error_count: int = 0
    last_error: Optional[str] = None
    metrics: Dict[str, Any] = field(default_factory=dict)

class RedisMessageBus:
    """Standardized Redis message bus for inter-server communication"""
    
    def __init__(self, redis_url: str = "redis://localhost:6379"):
        self.redis_url = redis_url
        self.redis_client = None
        self.connected = False
        
    async def connect(self) -> bool:
        """Connect to Redis message bus"""
        if not REDIS_AVAILABLE:
            print("Warning: Redis not available, using fallback mode")
            return False
            
        try:
            self.redis_client = await aioredis.from_url(self.redis_url)  # type: ignore[attr-defined]
            await self.redis_client.ping()
            self.connected = True
            return True
        except Exception as e:
            print(f"Redis connection failed: {e}")
            self.connected = False
            return False
    
    async def publish_message(self, channel: str, message: Dict[str, Any]) -> bool:
        """Publish message to Redis channel"""
        if not self.connected or not self.redis_client:
            return False
        
        try:
            message_data = json.dumps({
                **message,
                'timestamp': datetime.now().isoformat(),
                'message_id': f"{channel}_{int(time.time() * 1000)}"
            })
            await self.redis_client.publish(channel, message_data)
            return True
        except Exception:
            return False
    
    async def subscribe_to_channel(self, channel: str, callback: Callable[[Dict[str, Any]], Any]) -> None:
        """Subscribe to Redis channel with callback"""
        if not self.connected or not self.redis_client:
            return
        
        try:
            pubsub = self.redis_client.pubsub()
            await pubsub.subscribe(channel)
            
            async for message in pubsub.listen():
                if message['type'] == 'message':
                    try:
                        data = json.loads(message['data'])
                        await callback(data)
                    except Exception as e:
                        pass  # Ignore invalid messages
        except Exception:
            pass

class HealthMonitor:
    """Standardized health monitoring for MCP servers"""
    
    def __init__(self, server_name: str):
        self.server_name = server_name
        self.start_time = datetime.now()
        self.last_heartbeat = datetime.now()
        self.health_checks: Dict[str, bool] = {}
        
    def update_heartbeat(self):
        """Update server heartbeat"""
        self.last_heartbeat = datetime.now()
    
    def add_health_check(self, name: str, status: bool):
        """Add health check result"""
        self.health_checks[name] = status
    
    def get_health_status(self) -> Dict[str, Any]:
        """Get comprehensive health status"""
        uptime = datetime.now() - self.start_time
        memory_usage = psutil.Process().memory_info().rss / 1024 / 1024  # MB
        cpu_usage = psutil.Process().cpu_percent()
        
        return {
            'server_name': self.server_name,
            'status': 'healthy' if all(self.health_checks.values()) else 'degraded',
            'uptime_seconds': int(uptime.total_seconds()),
            'last_heartbeat': self.last_heartbeat.isoformat(),
            'memory_usage_mb': round(memory_usage, 2),
            'cpu_usage_percent': round(cpu_usage, 2),
            'health_checks': self.health_checks,
            'timestamp': datetime.now().isoformat()
        }

class ErrorHandler:
    """Standardized error handling and tracking"""
    
    def __init__(self, max_errors: int = 100):
        self.max_errors = max_errors
        self.errors: List[Dict[str, Any]] = []
        self.error_counts: Dict[str, int] = {}
    
    def log_error(self, error: Exception, context: str = "unknown", server_name: str = "unknown"):
        """Log error with context"""
        error_data = {
            'timestamp': datetime.now().isoformat(),
            'server_name': server_name,
            'context': context,
            'error_type': type(error).__name__,
            'error_message': str(error),
            'traceback': traceback.format_exc()
        }
        
        self.errors.append(error_data)
        
        # Keep only recent errors
        if len(self.errors) > self.max_errors:
            self.errors.pop(0)
        
        # Update error counts
        error_key = f"{context}:{type(error).__name__}"
        self.error_counts[error_key] = self.error_counts.get(error_key, 0) + 1
    
    def get_error_summary(self) -> Dict[str, Any]:
        """Get error summary"""
        recent_errors = [e for e in self.errors if 
                        datetime.fromisoformat(e['timestamp']) > datetime.now() - timedelta(hours=1)]
        
        return {
            'total_errors': len(self.errors),
            'recent_errors_1h': len(recent_errors),
            'error_types': list(self.error_counts.keys()),
            'most_recent_error': self.errors[-1] if self.errors else None
        }

class MCPServerMixin:
    """Mixin class providing common MCP server functionality"""
    
    def __init__(self, server_name: str, port: int):
        self.server_name = server_name
        self.port = port
        self.logger = setup_mcp_logging(server_name)
        self.health_monitor = HealthMonitor(server_name)
        self.error_handler = ErrorHandler()
        self.message_bus = RedisMessageBus()
        self.running = False
        
    async def initialize_common_services(self):
        """Initialize common services (Redis, health monitoring, etc.)"""
        # Connect to Redis message bus
        redis_connected = await self.message_bus.connect()
        self.health_monitor.add_health_check('redis_connection', redis_connected)
        
        if redis_connected:
            self.logger.info(f"‚úÖ {self.server_name} connected to Redis message bus")
        else:
            self.logger.warning(f"‚ö†Ô∏è {self.server_name} could not connect to Redis")
    
    async def send_heartbeat(self, additional_data: Optional[Dict[str, Any]] = None):
        """Send heartbeat to master coordinator"""
        self.health_monitor.update_heartbeat()
        
        heartbeat_data = {
            'server_name': self.server_name,
            'port': self.port,
            'status': 'running',
            'health': self.health_monitor.get_health_status(),
            'errors': self.error_handler.get_error_summary()
        }
        
        if additional_data:
            heartbeat_data.update(additional_data)
        
        await self.message_bus.publish_message('heartbeat', heartbeat_data)
    
    async def handle_error(self, error: Exception, context: str = "unknown"):
        """Standardized error handling"""
        self.error_handler.log_error(error, context, self.server_name)
        self.logger.error(f"Error in {context}: {error}")
        
        # Send error notification via message bus
        await self.message_bus.publish_message('error_notifications', {
            'server_name': self.server_name,
            'context': context,
            'error_type': type(error).__name__,
            'error_message': str(error)
        })
    
    async def health_check_endpoint(self, request: web.Request) -> web.Response:
        """Standardized health check endpoint"""
        try:
            health_status = self.health_monitor.get_health_status()
            return web.json_response(health_status)
        except Exception as e:
            await self.handle_error(e, "health_check")
            return web.json_response(
                {'status': 'error', 'error': str(e)},
                status=500
            )

@asynccontextmanager
async def mcp_server_context(server_name: str, port: int):
    """Context manager for MCP server lifecycle"""
    logger = setup_mcp_logging(server_name)
    logger.info(f"üöÄ Starting {server_name} on port {port}")
    
    try:
        yield
    except Exception as e:
        logger.error(f"‚ùå {server_name} failed: {e}")
        raise
    finally:
        logger.info(f"üõë {server_name} shutting down")

# Common configuration patterns
DEFAULT_MCP_CONFIG = {
    'redis_url': "redis://localhost:6379",
    'heartbeat_interval': 30,
    'health_check_interval': 60,
    'error_threshold': 10,
    'memory_limit_mb': 512,
    'cpu_limit_percent': 25,
    'request_timeout': 30,
    'max_concurrent_requests': 100
}

# Common HTTP client session configuration
async def create_http_session(timeout: int = 30) -> aiohttp.ClientSession:
    """Create standardized HTTP client session"""
    timeout_config = aiohttp.ClientTimeout(total=timeout)
    return aiohttp.ClientSession(timeout=timeout_config)

# Utility functions for common operations
def format_currency(amount: float, currency: str = "USD") -> str:
    """Format currency amount"""
    if currency == "USD":
        return f"${amount:,.2f}"
    else:
        return f"{amount:,.4f} {currency}"

def calculate_percentage_change(old_value: float, new_value: float) -> float:
    """Calculate percentage change"""
    if old_value == 0:
        return 0.0
    return ((new_value - old_value) / old_value) * 100

def validate_ethereum_address(address: str) -> bool:
    """Validate Ethereum address format"""
    return address.startswith('0x') and len(address) == 42

def safe_float(value: Any, default: float = 0.0) -> float:
    """Safely convert value to float"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default

def safe_int(value: Any, default: int = 0) -> int:
    """Safely convert value to integer"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default

# Export commonly used classes and functions
__all__ = [
    'setup_mcp_logging',
    'MCPServerBase',
    'RedisMessageBus', 
    'HealthMonitor',
    'ErrorHandler',
    'MCPServerMixin',
    'mcp_server_context',
    'DEFAULT_MCP_CONFIG',
    'create_http_session',
    'format_currency',
    'calculate_percentage_change',
    'validate_ethereum_address',
    'safe_float',
    'safe_int'
]
