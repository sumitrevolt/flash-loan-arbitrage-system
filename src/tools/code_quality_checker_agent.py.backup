"""
Code Quality Checker Agent for MCP Flash Loan System
Implements automated code quality checks with AI-enhanced analysis
"""

import os
import json
import logging
from typing import Dict, List, Any, TypedDict, Optional
from datetime import datetime, timezone
import subprocess
import ast
import re
from pathlib import Path

# Add FastAPI imports
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

# MCP imports - removing unused imports
# We're removing all the unused MCP imports
# from mcp import JSONDict

# Define custom type for issue dictionary
class IssueDict(TypedDict, total=False):
    type: str
    severity: str
    line: int
    message: str
    rule: str
    column: Optional[int]
    code: Optional[str]

# Required fields for IssueDict
class RequiredIssueDict(TypedDict):
    type: str
    severity: str
    line: int
    message: str
    rule: str

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# FastAPI app
app = FastAPI(title="Code Quality Checker Agent", version="1.0.0")

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request/Response models
class CodeCheckRequest(BaseModel):
    file_path: str
    check_type: str = "all"  # all, syntax, style, security, performance
    fix_issues: bool = False

class CodeCheckResponse(BaseModel):
    file_path: str
    status: str
    issues: List[Dict[str, Any]]
    metrics: Dict[str, Any]
    suggestions: List[str]
    timestamp: str

class CodeQualityChecker:
    """Main code quality checker implementation"""
    
    def __init__(self):
        self.workspace_path = Path("/workspace")
        self.supported_extensions = {
            '.py': 'python',
            '.js': 'javascript',
            '.ts': 'typescript',
            '.sol': 'solidity',
            '.json': 'json',
            '.yml': 'yaml',
            '.yaml': 'yaml'
        }
        self.quality_metrics: Dict[str, Any] = {}
        self.issues_found: List[IssueDict] = []
        
    async def check_file(self, file_path: str, check_type: str = "all") -> Dict[str, Any]:
        """Perform quality checks on a single file"""
        full_path = self.workspace_path / file_path
        
        if not full_path.exists():
            raise FileNotFoundError(f"File not found: {file_path}")
            
        file_ext = full_path.suffix.lower()
        if file_ext not in self.supported_extensions:
            return {
                "status": "skipped",
                "reason": f"Unsupported file type: {file_ext}"
            }
            
        language = self.supported_extensions[file_ext]
        content = full_path.read_text(encoding='utf-8')
        
        issues: List[IssueDict] = []
        metrics: Dict[str, Any] = {}
        
        # Run appropriate checks based on file type
        if language == 'python':
            issues.extend(await self._check_python_file(full_path, content, check_type))
            metrics.update(self._get_python_metrics(content))
        elif language in ['javascript', 'typescript']:
            issues.extend(await self._check_js_file(full_path, content, check_type))
            metrics.update(self._get_js_metrics(content))
        elif language == 'solidity':
            issues.extend(await self._check_solidity_file(full_path, content, check_type))
            metrics.update(self._get_solidity_metrics(content))
        elif language in ['json', 'yaml']:
            issues.extend(self._check_config_file(full_path, content, language))
        
        # AI-enhanced analysis
        suggestions = await self._get_ai_suggestions(content, language, issues)
        
        return {
            "file_path": file_path,
            "status": "passed" if not issues else "failed",
            "issues": issues,
            "metrics": metrics,
            "suggestions": suggestions,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    async def _check_python_file(self, file_path: Path, content: str, check_type: str) -> List[IssueDict]:
        """Check Python file quality"""
        issues: List[IssueDict] = []
        
        # Syntax check
        if check_type in ["all", "syntax"]:
            try:
                ast.parse(content)
            except SyntaxError as e:
                issues.append({
                    "type": "syntax_error",
                    "severity": "error",
                    "line": e.lineno if e.lineno is not None else 1,  # Ensure line is never None
                    "message": str(e),
                    "rule": "python_syntax"
                })
                
        # Style check with flake8
        if check_type in ["all", "style"]:
            try:
                result: str = subprocess.run(
                    ["flake8", "--max-line-length=100", str(file_path)],
                    capture_output=True,
                    text=True
                )
                for line in result.stdout.splitlines():
                    match = re.match(r"(.+):(\d+):(\d+): (\w+) (.+)", line)
                    if match:
                        issues.append({
                            "type": "style_violation",
                            "severity": "warning",
                            "line": int(match.group(2)),
                            "column": int(match.group(3)),
                            "code": match.group(4),
                            "message": match.group(5),
                            "rule": "flake8"
                        })
            except Exception as e:
                logger.warning(f"Flake8 check failed: {e}")
                
        # Security check
        if check_type in ["all", "security"]:
            security_patterns = [
        # TODO: Replace # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # WARNING: This is a security risk
                (r'eval\s*\(', "Avoid using eval() - security risk"),
        # TODO: Replace # TODO: Replace # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative
        # TODO: Replace # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative
        # TODO: Replace # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative
        # TODO: Replace # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'exec\s*\(', "Avoid using exec() - security risk"), with safer alternative
        # WARNING: This is a security risk
                (r'exec\s*\(', "Avoid using exec() - security risk"),
                (r'__import__\s*\(', "Dynamic imports can be security risk"),
                (r'pickle\.loads?\s*\(', "Pickle can execute arbitrary code"),
                (r'subprocess.*shell\s*=\s*True', "Shell injection risk"),
                (r'private_key|secret_key|password\s*=\s*["\']', "Hardcoded secrets detected")
            ]
            
            for line_num, line in enumerate(content.splitlines(), 1):
                for pattern, message in security_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        issues.append({
                            "type": "security_issue",
                            "severity": "error",
                            "line": line_num,
                            "message": message,
                            "rule": "security_scan"
                        })
                        
        # Performance check
        if check_type in ["all", "performance"]:
            perf_patterns = [
                (r'for .+ in range\(len\(', "Use enumerate() instead of range(len())"),
                (r'\.append\(.+\) for', "Consider list comprehension"),
                (r'time\.sleep\(', "Blocking sleep in async context"),
                (r'requests\.', "Consider using aiohttp for async operations")
            ]
            
            for line_num, line in enumerate(content.splitlines(), 1):
                for pattern, message in perf_patterns:
                    if re.search(pattern, line):
                        issues.append({
                            "type": "performance_issue",
                            "severity": "info",
                            "line": line_num,
                            "message": message,
                            "rule": "performance"
                        })
                        
        return issues
        
    async def _check_js_file(self, file_path: Path, content: str, check_type: str) -> List[IssueDict]:
        """Check JavaScript/TypeScript file quality"""
        issues: List[IssueDict] = []
        
        # Basic checks
        if check_type in ["all", "style"]:
            # Check for console.log statements
            for line_num, line in enumerate(content.splitlines(), 1):
                if 'console.log' in line and not line.strip().startswith('//'):
                    issues.append({
                        "type": "style_violation",
                        "severity": "warning",
                        "line": line_num,
                        "message": "Remove console.log statements",
                        "rule": "no-console"
                    })
                    
        # Security checks
        if check_type in ["all", "security"]:
            security_patterns = [
        # TODO: Replace # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # TODO: Replace # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # TODO: Replace # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # WARNING: This is a security risk
        # TODO: Replace (r'eval\s*\(', "Avoid using eval() - security risk"), with safer alternative
        # WARNING: This is a security risk
                (r'eval\s*\(', "Avoid using eval() - security risk"),
                (r'innerHTML\s*=', "Use textContent to avoid XSS"),
                (r'document\.write', "Avoid document.write()"),
                (r'private_key|secret_key|api_key\s*[:=]\s*["\']', "Hardcoded secrets detected")
            ]
            
            for line_num, line in enumerate(content.splitlines(), 1):
                for pattern, message in security_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        issues.append({
                            "type": "security_issue",
                            "severity": "error",
                            "line": line_num,
                            "message": message,
                            "rule": "security_scan"
                        })
                        
        return issues
        
    async def _check_solidity_file(self, file_path: Path, content: str, check_type: str) -> List[IssueDict]:
        """Check Solidity smart contract quality"""
        issues: List[IssueDict] = []
        
        if check_type in ["all", "security"]:
            # Critical security patterns for smart contracts
            security_patterns = [
                (r'tx\.origin', "Use msg.sender instead of tx.origin"),
                (r'block\.timestamp', "Block timestamp can be manipulated"),
                (r'send\s*\(|transfer\s*\(', "Use call() with reentrancy guard"),
                (r'delegatecall', "Delegatecall can be dangerous"),
                (r'selfdestruct', "Selfdestruct is dangerous"),
                (r'pragma\s+solidity\s+[\^><=]*0\.[4-6]\.', "Use Solidity 0.8.x or higher"),
                (r'function\s+\w+\s*\([^)]*\)\s+public\s+payable', "Payable functions need careful review")
            ]
            
            for line_num, line in enumerate(content.splitlines(), 1):
                for pattern, message in security_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        issues.append({
                            "type": "security_issue",
                            "severity": "critical",
                            "line": line_num,
                            "message": message,
                            "rule": "solidity_security"
                        })
                        
        return issues
        
    def _check_config_file(self, file_path: Path, content: str, file_type: str) -> List[IssueDict]:
        """Check configuration file validity"""
        issues: List[IssueDict] = []
        
        try:
            if file_type == 'json':
                json.loads(content)
            elif file_type in ['yaml', 'yml']:
                import yaml
                yaml.safe_load(content)
        except Exception as e:
            issues.append({
                "type": "syntax_error",
                "severity": "error",
                "line": 1,
                "message": f"Invalid {file_type.upper()} format: {str(e)}",
                "rule": f"{file_type}_validation"
            })
            
        return issues
        
    def _get_python_metrics(self, content: str) -> Dict[str, Any]:
        """Calculate Python code metrics"""
        lines = content.splitlines()
        return {
            "total_lines": len(lines),
            "code_lines": sum(1 for line in lines if line.strip() and not line.strip().startswith('#')),
            "comment_lines": sum(1 for line in lines if line.strip().startswith('#')),
            "blank_lines": sum(1 for line in lines if not line.strip()),
            "function_count": len(re.findall(r'^def\s+\w+', content, re.MULTILINE)),
            "class_count": len(re.findall(r'^class\s+\w+', content, re.MULTILINE)),
            "import_count": len(re.findall(r'^(import|from)\s+', content, re.MULTILINE))
        }
        
    def _get_js_metrics(self, content: str) -> Dict[str, Any]:
        """Calculate JavaScript code metrics"""
        lines = content.splitlines()
        return {
            "total_lines": len(lines),
            "code_lines": sum(1 for line in lines if line.strip() and not line.strip().startswith('//')),
            "comment_lines": sum(1 for line in lines if line.strip().startswith('//')),
            "function_count": len(re.findall(r'function\s+\w+|const\s+\w+\s*=\s*\(|=>\s*{', content)),
            "class_count": len(re.findall(r'class\s+\w+', content))
        }
        
    def _get_solidity_metrics(self, content: str) -> Dict[str, Any]:
        """Calculate Solidity code metrics"""
        return {
            "total_lines": len(content.splitlines()),
            "contract_count": len(re.findall(r'contract\s+\w+', content)),
            "function_count": len(re.findall(r'function\s+\w+', content)),
            "modifier_count": len(re.findall(r'modifier\s+\w+', content)),
            "event_count": len(re.findall(r'event\s+\w+', content))
        }
        
    async def _get_ai_suggestions(self, content: str, language: str, issues: List[IssueDict]) -> List[str]:
        """Generate AI-powered improvement suggestions"""
        suggestions: List[str] = []
        
        # Basic AI-like suggestions based on patterns
        if language == 'python':
            if 'class' not in content and len(content.splitlines()) > 100:
                suggestions.append("Consider organizing code into classes for better structure")
            if 'logging' not in content and 'print(' in content:
                suggestions.append("Replace print statements with proper logging")
            if 'try:' not in content and ('open(' in content or 'requests.' in content):
                suggestions.append("Add error handling for I/O operations")
                
        elif language == 'solidity':
            if 'require(' not in content and 'function' in content:
                suggestions.append("Add input validation with require statements")
            if 'event' not in content:
                suggestions.append("Add events for important state changes")
            if 'modifier' not in content and content.count('function') > 3:
                suggestions.append("Consider using modifiers for repeated access control")
                
        # Severity-based suggestions
        critical_issues: List[IssueDict] = [i for i in issues if i.get('severity') == 'critical']
        if critical_issues:
            suggestions.insert(0, f"⚠️ Fix {len(critical_issues)} critical security issues immediately")
            
        return suggestions

# Global checker instance
checker = CodeQualityChecker()

# FastAPI endpoints
@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "code-quality-checker"}

@app.post("/check", response_model=CodeCheckResponse)
async def check_code(request: CodeCheckRequest) -> CodeCheckResponse:
    """Check code quality for a single file"""
    try:
        result: str = await checker.check_file(request.file_path, request.check_type)
        return CodeCheckResponse(**result)
    except FileNotFoundError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"Code check failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Handle directory checks
@app.post("/check-directory")
async def check_directory(directory: str, check_type: str = "all") -> Dict[str, Any]:
    """Check all files in a directory"""
    results: List[Dict[str, Any]] = []
    workspace_dir = Path("/workspace") / directory
    
    if not workspace_dir.exists():
        raise HTTPException(status_code=404, detail=f"Directory not found: {directory}")
        
    for file_path in workspace_dir.rglob("*"):
        if file_path.is_file() and file_path.suffix in checker.supported_extensions:
            try:
                relative_path = file_path.relative_to(Path("/workspace"))
                result: str = await checker.check_file(str(relative_path), check_type)
                results.append(result)
            except Exception as e:
                logger.error(f"Failed to check {file_path}: {e}")
                
    return {
        "directory": directory,
        "files_checked": len(results),
        "passed": sum(1 for r in results if r["status"] == "passed"),
        "failed": sum(1 for r in results if r["status"] == "failed"),
        "results": results
    }

@app.get("/metrics")
async def get_quality_metrics() -> Dict[str, Any]:
    """Get overall code quality metrics"""
    return {
        "total_files_checked": len(checker.quality_metrics),
        "total_issues": len(checker.issues_found),
        "metrics": checker.quality_metrics,
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@app.post("/fix-issues")
async def fix_issues(file_path: str) -> Dict[str, str]:
    """Attempt to automatically fix code issues"""
    # This is a placeholder for auto-fix functionality
    return {
        "status": "not_implemented",
        "message": "Auto-fix functionality will be implemented in future versions"
    }

# MCP Server implementation
async def handle_mcp_request(request: Dict[str, Any]) -> Dict[str, Any]:
    """Handle MCP protocol requests"""
    method = request.get("method")
    params = request.get("params", {})
    
    if method == "check_code":
        result: str = await checker.check_file(
            params.get("file_path"),
            params.get("check_type", "all")
        )
        return {"result": result}
    elif method == "check_directory":
        # Implementation for directory checking
        return {"result": {"status": "ok"}}
    else:
        return {"error": f"Unknown method: {method}"}

# Main entry point
if __name__ == "__main__":
    # Check if running with FastAPI
    if os.getenv("ENABLE_FASTAPI", "true").lower() == "true":
        port = int(os.getenv("SERVER_PORT", "8010"))
        logger.info(f"Starting Code Quality Checker with FastAPI on port {port}")
        uvicorn.run(app, host="0.0.0.0", port=port)
    else:
        # Run as MCP server
        logger.info("Starting Code Quality Checker as MCP server")
        # MCP server implementation would go here